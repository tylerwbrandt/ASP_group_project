legend("topright", inset=0.01, legend=c("Actual", "Hibbs"), pch=c("o","x"), col=c("black", "blue"))
} else if (input$forecast=="Abramowitz"){
plot(presidentialForecast$Actual, main="Plot of Election Results and Forecasts",
xlab="Year of Election", ylab="Vote Share, Percentage", xaxt='n', ylim=c(40, 70))
points(presidentialForecast$Abramowitz, pch="x", col="blue")
axis(side=1, at = c(seq(1,15,1)), labels=c(seq(1952,2008,4)))
legend("topright", inset=0.01, legend=c("Actual", "Abramowitz"), pch=c("o","x"), col=c("black", "blue"))
}
})
#
output$plot_clickinfo <- renderText({
paste0("Year=", round(input$plot_click$x+1952), "\nVote Share, Percentage=", round(input$plot_click$y, digits=4))
})
}
# Create Shiny app ----
shinyApp(ui = ui, server = server)
library(shiny)
# Define UI for dataset viewer app ----
ui <- fluidPage(
# App title ----
titlePanel("Presidential Forecast"),
# Sidebar layout with a input and output definitions ----
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
# Include clarifying text ----
helpText("Here are the results of presidential forecasts from 1952-2008"),
# Input: Numeric entry for number of obs to view ----
numericInput(inputId = "obs",
label = "Last X elections to view:",
value = 15),
# Input: Selector for choosing specific forecast to add to plot ----
selectInput(inputId = "forecast",
label = "Choose a forecast to plot:",
choices = c("Actual","Campbell", "Lewis-Beck", "EWT2C2", "Fair",
"Hibbs", "Abramowitz"))
),
# Main panel for displaying outputs ----
mainPanel(
#
tableOutput("view"),
#
plotOutput("plot", click="plot_click"),
#
h4("Clicked points"),
verbatimTextOutput("plot_clickinfo")
)
)
)
# Define server logic to summarize and view selected dataset ----
server <- function(input, output) {
# Loads dataset, sort in descending order
library(EBMAforecast)
data("presidentialForecast")
presidentialForecast$Year <- as.numeric(row.names(presidentialForecast))
presidentialForecast<-presidentialForecast[order(presidentialForecast$Year,decreasing=TRUE), ]
names(presidentialForecast)[2]<-"LewisBeck"
# Generates table showing the last X elections (as selectd by the user)
output$view <- renderTable({
head(presidentialForecast, n=input$obs)
})
# Plot the election results and a specific forecast
output$plot <- renderPlot({
if (input$forecast=="Actual"){
plot(presidentialForecast$Actual, main="Plot of Election Results and Forecasts",
xlab="Year of Election", ylab="Vote Share, Percentage", xaxt='n', ylim=c(40, 70))
axis(side=1, at = c(seq(1,15,1)), labels=c(seq(1952,2008,4)))
legend("topright", inset=0.01, legend=c("Actual"), pch=c("o"), col=c("black"))
} else if (input$forecast=="Campbell"){
plot(presidentialForecast$Actual, main="Plot of Election Results and Forecasts",
xlab="Year of Election", ylab="Vote Share, Percentage", xaxt='n', ylim=c(40, 70))
points(presidentialForecast$Campbell, pch="x", col="blue")
axis(side=1, at = c(seq(1,15,1)), labels=c(seq(1952,2008,4)))
legend("topright", inset=0.01, legend=c("Actual", "Campbell"), pch=c("o","x"), col=c("black", "blue"))
} else if (input$forecast=="Lewis-Beck"){
plot(presidentialForecast$Actual, main="Plot of Election Results and Forecasts",
xlab="Year of Election", ylab="Vote Share, Percentage", xaxt='n', ylim=c(40, 70))
points(presidentialForecast$LewisBeck, pch="x", col="blue")
axis(side=1, at = c(seq(1,15,1)), labels=c(seq(1952,2008,4)))
legend("topright", inset=0.01, legend=c("Actual", "Lewis-Beck"), pch=c("o","x"), col=c("black", "blue"))
} else if (input$forecast=="EWT2C2"){
plot(presidentialForecast$Actual, main="Plot of Election Results and Forecasts",
xlab="Year of Election", ylab="Vote Share, Percentage", xaxt='n', ylim=c(40, 70))
points(presidentialForecast$EWT2C2, pch="x", col="blue")
axis(side=1, at = c(seq(1,15,1)), labels=c(seq(1952,2008,4)))
legend("topright", inset=0.01, legend=c("Actual", "EWT2C2"), pch=c("o","x"), col=c("black", "blue"))
} else if (input$forecast=="Fair"){
plot(presidentialForecast$Actual, main="Plot of Election Results and Forecasts",
xlab="Year of Election", ylab="Vote Share, Percentage", xaxt='n', ylim=c(40, 70))
points(presidentialForecast$Fair, pch="x", col="blue")
axis(side=1, at = c(seq(1,15,1)), labels=c(seq(1952,2008,4)))
legend("topright", inset=0.01, legend=c("Actual", "Fair"), pch=c("o","x"), col=c("black", "blue"))
} else if (input$forecast=="Hibbs"){
plot(presidentialForecast$Actual, main="Plot of Election Results and Forecasts",
xlab="Year of Election", ylab="Vote Share, Percentage", xaxt='n', ylim=c(40, 70))
points(presidentialForecast$Hibbs, pch="x", col="blue")
axis(side=1, at = c(seq(1,15,1)), labels=c(seq(1952,2008,4)))
legend("topright", inset=0.01, legend=c("Actual", "Hibbs"), pch=c("o","x"), col=c("black", "blue"))
} else if (input$forecast=="Abramowitz"){
plot(presidentialForecast$Actual, main="Plot of Election Results and Forecasts",
xlab="Year of Election", ylab="Vote Share, Percentage", xaxt='n', ylim=c(40, 70))
points(presidentialForecast$Abramowitz, pch="x", col="blue")
axis(side=1, at = c(seq(1,15,1)), labels=c(seq(1952,2008,4)))
legend("topright", inset=0.01, legend=c("Actual", "Abramowitz"), pch=c("o","x"), col=c("black", "blue"))
}
})
#
output$plot_clickinfo <- renderText({
paste0("Year=", round(input$plot_click$x+1952), "\nVote Share, Percentage=", input$plot_click$y)
})
}
# Create Shiny app ----
shinyApp(ui = ui, server = server)
library(shiny)
# Define UI for dataset viewer app ----
ui <- fluidPage(
# App title ----
titlePanel("Presidential Forecast"),
# Sidebar layout with a input and output definitions ----
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
# Include clarifying text ----
helpText("Here are the results of presidential forecasts from 1952-2008"),
# Input: Numeric entry for number of obs to view ----
numericInput(inputId = "obs",
label = "Last X elections to view:",
value = 15),
# Input: Selector for choosing specific forecast to add to plot ----
selectInput(inputId = "forecast",
label = "Choose a forecast to plot:",
choices = c("Actual","Campbell", "Lewis-Beck", "EWT2C2", "Fair",
"Hibbs", "Abramowitz"))
),
# Main panel for displaying outputs ----
mainPanel(
#
tableOutput("view"),
#
plotOutput("plot", click="plot_click"),
#
h4("Clicked points"),
verbatimTextOutput("plot_clickinfo")
)
)
)
# Define server logic to summarize and view selected dataset ----
server <- function(input, output) {
# Loads dataset, sort in descending order
library(EBMAforecast)
data("presidentialForecast")
presidentialForecast$Year <- as.numeric(row.names(presidentialForecast))
presidentialForecast<-presidentialForecast[order(presidentialForecast$Year,decreasing=TRUE), ]
names(presidentialForecast)[2]<-"LewisBeck"
# Generates table showing the last X elections (as selectd by the user)
output$view <- renderTable({
head(presidentialForecast, n=input$obs)
})
# Plot the election results and a specific forecast
output$plot <- renderPlot({
if (input$forecast=="Actual"){
plot(presidentialForecast$Actual, main="Plot of Election Results and Forecasts",
xlab="Year of Election", ylab="Vote Share, Percentage", xaxt='n', ylim=c(40, 70))
axis(side=1, at = c(seq(1,15,1)), labels=c(seq(1952,2008,4)))
legend("topright", inset=0.01, legend=c("Actual"), pch=c("o"), col=c("black"))
} else if (input$forecast=="Campbell"){
plot(presidentialForecast$Actual, main="Plot of Election Results and Forecasts",
xlab="Year of Election", ylab="Vote Share, Percentage", xaxt='n', ylim=c(40, 70))
points(presidentialForecast$Campbell, pch="x", col="blue")
axis(side=1, at = c(seq(1,15,1)), labels=c(seq(1952,2008,4)))
legend("topright", inset=0.01, legend=c("Actual", "Campbell"), pch=c("o","x"), col=c("black", "blue"))
} else if (input$forecast=="Lewis-Beck"){
plot(presidentialForecast$Actual, main="Plot of Election Results and Forecasts",
xlab="Year of Election", ylab="Vote Share, Percentage", xaxt='n', ylim=c(40, 70))
points(presidentialForecast$LewisBeck, pch="x", col="blue")
axis(side=1, at = c(seq(1,15,1)), labels=c(seq(1952,2008,4)))
legend("topright", inset=0.01, legend=c("Actual", "Lewis-Beck"), pch=c("o","x"), col=c("black", "blue"))
} else if (input$forecast=="EWT2C2"){
plot(presidentialForecast$Actual, main="Plot of Election Results and Forecasts",
xlab="Year of Election", ylab="Vote Share, Percentage", xaxt='n', ylim=c(40, 70))
points(presidentialForecast$EWT2C2, pch="x", col="blue")
axis(side=1, at = c(seq(1,15,1)), labels=c(seq(1952,2008,4)))
legend("topright", inset=0.01, legend=c("Actual", "EWT2C2"), pch=c("o","x"), col=c("black", "blue"))
} else if (input$forecast=="Fair"){
plot(presidentialForecast$Actual, main="Plot of Election Results and Forecasts",
xlab="Year of Election", ylab="Vote Share, Percentage", xaxt='n', ylim=c(40, 70))
points(presidentialForecast$Fair, pch="x", col="blue")
axis(side=1, at = c(seq(1,15,1)), labels=c(seq(1952,2008,4)))
legend("topright", inset=0.01, legend=c("Actual", "Fair"), pch=c("o","x"), col=c("black", "blue"))
} else if (input$forecast=="Hibbs"){
plot(presidentialForecast$Actual, main="Plot of Election Results and Forecasts",
xlab="Year of Election", ylab="Vote Share, Percentage", xaxt='n', ylim=c(40, 70))
points(presidentialForecast$Hibbs, pch="x", col="blue")
axis(side=1, at = c(seq(1,15,1)), labels=c(seq(1952,2008,4)))
legend("topright", inset=0.01, legend=c("Actual", "Hibbs"), pch=c("o","x"), col=c("black", "blue"))
} else if (input$forecast=="Abramowitz"){
plot(presidentialForecast$Actual, main="Plot of Election Results and Forecasts",
xlab="Year of Election", ylab="Vote Share, Percentage", xaxt='n', ylim=c(40, 70))
points(presidentialForecast$Abramowitz, pch="x", col="blue")
axis(side=1, at = c(seq(1,15,1)), labels=c(seq(1952,2008,4)))
legend("topright", inset=0.01, legend=c("Actual", "Abramowitz"), pch=c("o","x"), col=c("black", "blue"))
}
})
#
output$plot_clickinfo <- renderText({
paste0("Year=", round(4*input$plot_click$x+1952), "\nVote Share, Percentage=", input$plot_click$y)
})
}
# Create Shiny app ----
shinyApp(ui = ui, server = server)
library(shiny)
# Define UI for dataset viewer app ----
ui <- fluidPage(
# App title ----
titlePanel("Presidential Forecast"),
# Sidebar layout with a input and output definitions ----
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
# Include clarifying text ----
helpText("Here are the results of presidential forecasts from 1952-2008"),
# Input: Numeric entry for number of obs to view ----
numericInput(inputId = "obs",
label = "Last X elections to view:",
value = 15),
# Input: Selector for choosing specific forecast to add to plot ----
selectInput(inputId = "forecast",
label = "Choose a forecast to plot:",
choices = c("Actual","Campbell", "Lewis-Beck", "EWT2C2", "Fair",
"Hibbs", "Abramowitz"))
),
# Main panel for displaying outputs ----
mainPanel(
#
tableOutput("view"),
#
plotOutput("plot", click="plot_click"),
#
h4("Clicked points"),
verbatimTextOutput("plot_clickinfo")
)
)
)
# Define server logic to summarize and view selected dataset ----
server <- function(input, output) {
# Loads dataset, sort in descending order
library(EBMAforecast)
data("presidentialForecast")
presidentialForecast$Year <- as.numeric(row.names(presidentialForecast))
presidentialForecast<-presidentialForecast[order(presidentialForecast$Year,decreasing=TRUE), ]
names(presidentialForecast)[2]<-"LewisBeck"
# Generates table showing the last X elections (as selectd by the user)
output$view <- renderTable({
head(presidentialForecast, n=input$obs)
})
# Plot the election results and a specific forecast
output$plot <- renderPlot({
if (input$forecast=="Actual"){
plot(presidentialForecast$Actual, main="Plot of Election Results and Forecasts",
xlab="Year of Election", ylab="Vote Share, Percentage", xaxt='n', ylim=c(40, 70))
axis(side=1, at = c(seq(1,15,1)), labels=c(seq(1952,2008,4)))
legend("topright", inset=0.01, legend=c("Actual"), pch=c("o"), col=c("black"))
} else if (input$forecast=="Campbell"){
plot(presidentialForecast$Actual, main="Plot of Election Results and Forecasts",
xlab="Year of Election", ylab="Vote Share, Percentage", xaxt='n', ylim=c(40, 70))
points(presidentialForecast$Campbell, pch="x", col="blue")
axis(side=1, at = c(seq(1,15,1)), labels=c(seq(1952,2008,4)))
legend("topright", inset=0.01, legend=c("Actual", "Campbell"), pch=c("o","x"), col=c("black", "blue"))
} else if (input$forecast=="Lewis-Beck"){
plot(presidentialForecast$Actual, main="Plot of Election Results and Forecasts",
xlab="Year of Election", ylab="Vote Share, Percentage", xaxt='n', ylim=c(40, 70))
points(presidentialForecast$LewisBeck, pch="x", col="blue")
axis(side=1, at = c(seq(1,15,1)), labels=c(seq(1952,2008,4)))
legend("topright", inset=0.01, legend=c("Actual", "Lewis-Beck"), pch=c("o","x"), col=c("black", "blue"))
} else if (input$forecast=="EWT2C2"){
plot(presidentialForecast$Actual, main="Plot of Election Results and Forecasts",
xlab="Year of Election", ylab="Vote Share, Percentage", xaxt='n', ylim=c(40, 70))
points(presidentialForecast$EWT2C2, pch="x", col="blue")
axis(side=1, at = c(seq(1,15,1)), labels=c(seq(1952,2008,4)))
legend("topright", inset=0.01, legend=c("Actual", "EWT2C2"), pch=c("o","x"), col=c("black", "blue"))
} else if (input$forecast=="Fair"){
plot(presidentialForecast$Actual, main="Plot of Election Results and Forecasts",
xlab="Year of Election", ylab="Vote Share, Percentage", xaxt='n', ylim=c(40, 70))
points(presidentialForecast$Fair, pch="x", col="blue")
axis(side=1, at = c(seq(1,15,1)), labels=c(seq(1952,2008,4)))
legend("topright", inset=0.01, legend=c("Actual", "Fair"), pch=c("o","x"), col=c("black", "blue"))
} else if (input$forecast=="Hibbs"){
plot(presidentialForecast$Actual, main="Plot of Election Results and Forecasts",
xlab="Year of Election", ylab="Vote Share, Percentage", xaxt='n', ylim=c(40, 70))
points(presidentialForecast$Hibbs, pch="x", col="blue")
axis(side=1, at = c(seq(1,15,1)), labels=c(seq(1952,2008,4)))
legend("topright", inset=0.01, legend=c("Actual", "Hibbs"), pch=c("o","x"), col=c("black", "blue"))
} else if (input$forecast=="Abramowitz"){
plot(presidentialForecast$Actual, main="Plot of Election Results and Forecasts",
xlab="Year of Election", ylab="Vote Share, Percentage", xaxt='n', ylim=c(40, 70))
points(presidentialForecast$Abramowitz, pch="x", col="blue")
axis(side=1, at = c(seq(1,15,1)), labels=c(seq(1952,2008,4)))
legend("topright", inset=0.01, legend=c("Actual", "Abramowitz"), pch=c("o","x"), col=c("black", "blue"))
}
})
#
output$plot_clickinfo <- renderText({
paste0("Year=", round(4*input$plot_click$x+1948), "\nVote Share, Percentage=", input$plot_click$y)
})
}
# Create Shiny app ----
shinyApp(ui = ui, server = server)
library(shiny)
# Define UI for dataset viewer app ----
ui <- fluidPage(
# App title ----
titlePanel("Presidential Forecast"),
# Sidebar layout with a input and output definitions ----
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
# Include clarifying text ----
helpText("Here are the results of presidential forecasts from 1952-2008"),
# Input: Numeric entry for number of obs to view ----
numericInput(inputId = "obs",
label = "Last X elections to view:",
value = 15),
# Input: Selector for choosing specific forecast to add to plot ----
selectInput(inputId = "forecast",
label = "Choose a forecast to plot:",
choices = c("Actual","Campbell", "Lewis-Beck", "EWT2C2", "Fair",
"Hibbs", "Abramowitz"))
),
# Main panel for displaying outputs ----
mainPanel(
# Display table of data
tableOutput("view"),
# Display plot
plotOutput("plot", click="plot_click"),
# Display x and y coordinates of clicked point
h4("Clicked points"),
verbatimTextOutput("plot_clickinfo")
)
)
)
# Define server logic to summarize and view selected dataset ----
server <- function(input, output) {
# Loads dataset, sort in descending order
library(EBMAforecast)
data("presidentialForecast")
presidentialForecast$Year <- as.numeric(row.names(presidentialForecast))
presidentialForecast<-presidentialForecast[order(presidentialForecast$Year,decreasing=TRUE), ]
names(presidentialForecast)[2]<-"LewisBeck"
# Generates table showing the last X elections (as selectd by the user)
output$view <- renderTable({
head(presidentialForecast, n=input$obs)
})
# Plot the election results and a specific forecast
output$plot <- renderPlot({
if (input$forecast=="Actual"){
plot(presidentialForecast$Actual, main="Plot of Election Results and Forecasts",
xlab="Year of Election", ylab="Vote Share, Percentage", xaxt='n', ylim=c(40, 70))
axis(side=1, at = c(seq(1,15,1)), labels=c(seq(1952,2008,4)))
legend("topright", inset=0.01, legend=c("Actual"), pch=c("o"), col=c("black"))
} else if (input$forecast=="Campbell"){
plot(presidentialForecast$Actual, main="Plot of Election Results and Forecasts",
xlab="Year of Election", ylab="Vote Share, Percentage", xaxt='n', ylim=c(40, 70))
points(presidentialForecast$Campbell, pch="x", col="blue")
axis(side=1, at = c(seq(1,15,1)), labels=c(seq(1952,2008,4)))
legend("topright", inset=0.01, legend=c("Actual", "Campbell"), pch=c("o","x"), col=c("black", "blue"))
} else if (input$forecast=="Lewis-Beck"){
plot(presidentialForecast$Actual, main="Plot of Election Results and Forecasts",
xlab="Year of Election", ylab="Vote Share, Percentage", xaxt='n', ylim=c(40, 70))
points(presidentialForecast$LewisBeck, pch="x", col="blue")
axis(side=1, at = c(seq(1,15,1)), labels=c(seq(1952,2008,4)))
legend("topright", inset=0.01, legend=c("Actual", "Lewis-Beck"), pch=c("o","x"), col=c("black", "blue"))
} else if (input$forecast=="EWT2C2"){
plot(presidentialForecast$Actual, main="Plot of Election Results and Forecasts",
xlab="Year of Election", ylab="Vote Share, Percentage", xaxt='n', ylim=c(40, 70))
points(presidentialForecast$EWT2C2, pch="x", col="blue")
axis(side=1, at = c(seq(1,15,1)), labels=c(seq(1952,2008,4)))
legend("topright", inset=0.01, legend=c("Actual", "EWT2C2"), pch=c("o","x"), col=c("black", "blue"))
} else if (input$forecast=="Fair"){
plot(presidentialForecast$Actual, main="Plot of Election Results and Forecasts",
xlab="Year of Election", ylab="Vote Share, Percentage", xaxt='n', ylim=c(40, 70))
points(presidentialForecast$Fair, pch="x", col="blue")
axis(side=1, at = c(seq(1,15,1)), labels=c(seq(1952,2008,4)))
legend("topright", inset=0.01, legend=c("Actual", "Fair"), pch=c("o","x"), col=c("black", "blue"))
} else if (input$forecast=="Hibbs"){
plot(presidentialForecast$Actual, main="Plot of Election Results and Forecasts",
xlab="Year of Election", ylab="Vote Share, Percentage", xaxt='n', ylim=c(40, 70))
points(presidentialForecast$Hibbs, pch="x", col="blue")
axis(side=1, at = c(seq(1,15,1)), labels=c(seq(1952,2008,4)))
legend("topright", inset=0.01, legend=c("Actual", "Hibbs"), pch=c("o","x"), col=c("black", "blue"))
} else if (input$forecast=="Abramowitz"){
plot(presidentialForecast$Actual, main="Plot of Election Results and Forecasts",
xlab="Year of Election", ylab="Vote Share, Percentage", xaxt='n', ylim=c(40, 70))
points(presidentialForecast$Abramowitz, pch="x", col="blue")
axis(side=1, at = c(seq(1,15,1)), labels=c(seq(1952,2008,4)))
legend("topright", inset=0.01, legend=c("Actual", "Abramowitz"), pch=c("o","x"), col=c("black", "blue"))
}
})
# Prints point clicked, x = year, y = vote share percentage
output$plot_clickinfo <- renderText({
paste0("Year=", round(4*input$plot_click$x+1948), "\nVote Share, Percentage=", input$plot_click$y)
})
}
# Create Shiny app ----
shinyApp(ui = ui, server = server)
## Load libraries
library(devtools)
library(roxygen2)
## Set working directory
setwd("~/Documents/GitHub/ASP_group_project") # Gangyi
## Updates the package based on R scripts written, man and NAMESPACE automatically updates.
# Manually update DESCRIPTION if need be.
current.code <- as.package("gaussianComparisons")
load_all(current.code)
## Load libraries
library(devtools)
library(roxygen2)
## Set working directory
setwd("~/Documents/GitHub/ASP_group_project") # Gangyi
## Updates the package based on R scripts written, man and NAMESPACE automatically updates.
# Manually update DESCRIPTION if need be.
current.code <- as.package("gaussianComparisons")
load_all(current.code)
## Sample code to test that functions work
# cleaner Function
data_montgomery <- read.csv("gaussianComparisons/data/exampleHITs.csv")
data_small <- read.csv("gaussianComparisons/data/exampleHITsSmall.csv")
data_clean <- cleaner(data_montgomery)
omega_data <- omega(data_montgomery,2)
table(unique(omega_data))
draw<-gPrior(omega_data)
draw[data_clean$first==5053]
draw[data_clean$second==5053]
draw[data_clean$second==5069]
draw[data_clean$first==5069]
my.g.hat<-newtonMethod(omega_data, data_clean$y, tol=.00000001)
plot(my.g.hat, data_clean$y)
head(data_clean)
# finalS Function
finalS(5059, 5091, omega_data, data_clean, 2, 0.01)
# maxInfoComp Function
# [CURRENTLY TAKES ABOUT 45mins TO RUN on exampleHITs dataset]
a<-maxInfoComp(data_montgomery, 2, 0.01, 1000)
# Use docid 5059 to compare all
docids <- unique(data_montgomery$document_id)
# Create s values
finalS_values <- NULL
for (i in docids){
new_Svalue <- finalS(doc1 = 5059, doc2 = i, omega1 = omega_data, cleaned_data = data_clean,
sigma = 2, tolerance = 0.01)
finalS_values <- c(finalS_values, new_Svalue)
}
# Create mu hat values
mu_values <- NULL
sigma <- 2
for (i in docids){
little_omega <- rep(0, nrow(data_clean))
for (j in 1:nrow(data_clean)){
if (5059 == data_clean$first[j]){
little_omega[j] <- little_omega[j] + sigma^2
}
if (5059 == data_clean$second[j]){
little_omega[j] <- little_omega[j] - sigma^2
}
if (i == data_clean$first[j]){
little_omega[j] <- little_omega[j] - sigma^2
}
if (i == data_clean$second[j]){
little_omega[j] <- little_omega[j] + sigma^2
}
}
new_muvalue <- muMaker(doc1 = 5059, doc2 = i, omega1 = omega_data, cleaned_data = data_clean,
sigma = 2, tolerance = 0.01, little_omega = little_omega)
mu_values <- c(mu_values, new_muvalue)
}
# Create rho squared values
rhoSquared_values <- NULL
sigma <- 2
for (i in docids){
little_omega <- rep(0, nrow(data_clean))
for (j in 1:nrow(data_clean)){
if (5059 == data_clean$first[j]){
little_omega[j] <- little_omega[j] + sigma^2
}
if (5059 == data_clean$second[j]){
little_omega[j] <- little_omega[j] - sigma^2
}
if (i == data_clean$first[j]){
little_omega[j] <- little_omega[j] - sigma^2
}
if (i == data_clean$second[j]){
little_omega[j] <- little_omega[j] + sigma^2
}
}
new_rhoSquaredValue <- rhoSquaredMaker(doc1 = 5059, doc2 = i, omega1 = omega_data,
cleaned_data = data_clean, sigma = 2, tolerance = 0.01,
little_omega = little_omega)
rhoSquared_values <- c(rhoSquared_values, new_rhoSquaredValue)
}
# Create dataframe
summary_df <- data.frame(rep(5059, 50), docids, finalS_values, mu_values, rhoSquared_values)
colnames(summary_df) <- c("doc1", "doc2", "s_values", "mu_hat", "rho_squared")
summary_df <- summary_df[order(summary_df$s_values), ]
View(summary_df)
## Plot s values versus mu hat
plot(summary_df$mu_hat, summary_df$s_values, xlab = "mu hat values", ylab = "s values",
main = "Information Gain By Expected g Values")
logEstMu<-lm(summary_df$s_values ~ log(summary_df$mu_hat))
expEstMu<-lm(summary_df$s_values ~ exp(summary_df$mu_hat))
lines(x,predict(expEstMu),col='red')
lines(summary_df$mu_hat,predict(expEstMu),col='red')
summary(expEstMu)
install.packages("XQuartz")
