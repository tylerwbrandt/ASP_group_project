result<-PlayGame(p1)
noSwitch<-c(noSwitch,result)
}
rm(PlayNoSwitch())
# Part 3: Simulation
# 1) Simulate 1000 rounds of the game, player does not switch
noSwitch<-c()
for (i in 1:1000){
p1<-new("door", chosenDoor=1,carDoor=1,switch=F)
result<-PlayGame(p1)
noSwitch<-c(noSwitch,result)
}
table(noSwitch)
noSwitchTable<-table(noSwitch)
noSwitchTable[1]
noSwitchTable[2]
noSwitchTable[2][1]
noSwitchTable[2][2]
noSwitchTable[2]/1000
table(noSwitch)
# 2) simulate 1000 rounds of the game, player does switches
yesSwitch<-c()
for (i in 1:1000){
p1<-new("door", chosenDoor=1,carDoor=1,switch=F)
result<-PlayGame(p1)
yesSwitch<-c(yesSwitch,result)
}
table(yesSwitch)
# 2) simulate 1000 rounds of the game, player does switches
yesSwitch<-c()
for (i in 1:1000){
p1<-new("door", chosenDoor=1,carDoor=1,switch=T)
result<-PlayGame(p1)
yesSwitch<-c(yesSwitch,result)
}
table(yesSwitch)
PlayNoSwitch<-function(i){
p1<-new("door", chosenDoor=1,carDoor=1,switch=F)
result<-PlayGame(p1)
return(result)
}
noSwitch2<-sapply(c(1:1000),PlayNoSwitch)
table(noSwitch2)
# 2) simulate 1000 rounds of the game, player does switches
PlayYesSwitch<-function(i){
p1<-new("door", chosenDoor=1,carDoor=1,switch=T)
result<-PlayGame(p1)
return(result)
}
yesSwitch<-sapply(c(1:1000),PlayYesSwitch)
table(yesSwitch)
noSwitch<-sapply(c(1:1000),PlayNoSwitch)
table(noSwitch)
yesSwitch<-sapply(c(1:1000),PlayYesSwitch)
table(yesSwitch)
?count.fields
prop.table(noSwitch)
table(noSwitch)
?table
print(a[1])
a<-table(yesSwitch)
print(a[1])
print(a[1]+"test")
paste(a[1]+"test")
paste(a[1],"test")
paste(a[1]/1000,"test")
tabNoSwitch<-table(noSwitch)
tabNoSwitch
perctWon<-tabNoSwitch[2]/1000*100
noSwitch<-sapply(c(1:1000),PlayNoSwitch)
noSwitch<-sapply(c(1:1000),PlayNoSwitch)
tabNoSwitch<-table(noSwitch)
perctWonNoSwitch<-tabNoSwitch[2]/1000*100
noSwitch<-sapply(c(1:1000),PlayNoSwitch)
tabNoSwitch<-table(noSwitch)
perctWonNoSwitch<-tabNoSwitch[2]/1000*100
paste("Player who choose not to switch won ", perctWonNoSwitch, "% of the time.")
yesSwitch<-sapply(c(1:1000),PlayYesSwitch)
tabYesSwitch<-table(yesSwitch)
perctWonYesSwitch<-tabYesSwitch[2]/1000*100
paste("Player who chose to switch won ", perctWonYesSwitch, "% of the time.")
noSwitch<-sapply(c(1:1000),PlayNoSwitch)
tabNoSwitch<-table(noSwitch)
perctWonNoSwitch<-tabNoSwitch[2]/1000*100
paste("Player who chose not to switch won ", perctWonNoSwitch, "% of the time.")
noSwitch<-sapply(c(1:1000),PlayNoSwitch)
tabNoSwitch<-table(noSwitch)
perctWonNoSwitch<-tabNoSwitch[2]/1000*100
paste("Player who chose not to switch won ", perctWonNoSwitch, "% of the time.")
noSwitch<-sapply(c(1:1000),PlayNoSwitch)
tabNoSwitch<-table(noSwitch)
perctWonNoSwitch<-tabNoSwitch[2]/1000*100
paste("Player who chose not to switch won ", perctWonNoSwitch, "% of the time.")
# 2) simulate 1000 rounds of the game, player does switches
PlayYesSwitch<-function(i){
p1<-new("door", chosenDoor=1,carDoor=1,switch=T)
result<-PlayGame(p1)
return(result)
}
yesSwitch<-sapply(c(1:1000),PlayYesSwitch)
tabYesSwitch<-table(yesSwitch)
perctWonYesSwitch<-tabYesSwitch[2]/1000*100
paste("Player who chose to switch won ", perctWonYesSwitch, "% of the time.")
# Define a new S4 class door.
# Objects of class door contains an integer called chosenDoor (door chosen by the player), an integer called
# carDoor (door behind which a car is located), and a logical called switch (indiciating whether the player wants
# to switch doors).
setClass(Class="door",
representation = representation (
chosenDoor="numeric",
carDoor="numeric",
switch="logical"
),
prototype = prototype (
chosenDoor=c(),
carDoor=c(),
switch=c()
)
)
# A validation function that checks whether values stored in the slots are appropriately structured.
# The validation function ensures that the values stored in chosenDoor and carDoor are either 1, 2 or 3, and that
# the value stored in switch is either TRUE or FALSE.
setValidity("door", function(object){
test1<-(object@chosenDoor==1 | object@chosenDoor==2 | object@chosenDoor==3)
test2<-(object@carDoor==1 | object@carDoor==2 | object@carDoor==3)
test3<-(object@switch==TRUE | object@switch==FALSE)
test<-(test1==TRUE & test2==TRUE & test3==TRUE)
if(test!=TRUE){return("@DoorChoice is not a valid value")}
}
)
# A construction function that allows the user to create a door object
setMethod("initialize", "door",  function(.Object, ...){
value = callNextMethod()
validObject(value)
return(value)
}
)
# Create generic PlayGame
setGeneric("PlayGame", function(object="door"){
standardGeneric("PlayGame")
}
)
# creates PlayGame method for class door.
# The method PlayGame takes as input an object door of class door, and returns winner, a boolean indicating
# whether or not the door that was finally chosen was the same as the door where the car is.
setMethod("PlayGame", "door",
function(object){
winner<-FALSE                   # sets winner to FALSE to begin with
object@carDoor<-sample(1:3,1)   # for the purposes of the simulation, randomly choose carDoor
firstChosenDoor<-sample(1:3,1)  # for the purposes of the simulation, randomly choose first door player
# chooses, firstChosenDoor
if (object@switch==FALSE){      # if player doesn't switch, her chosenDoor is firstChosenDoor
object@chosenDoor<-firstChosenDoor
}
if (object@switch==TRUE){       # if player switches,
temp<-FALSE
openDoor<-0
while(temp==FALSE){
openDoor<-sample(1:3,1)     # randomly choose a door to remove from consideration
if ((openDoor!=object@carDoor)&(openDoor!=firstChosenDoor)){    # this door to be removed cannot
# contain the car, and cannot be
# firstChosenDoor
temp<-TRUE
}
}
if(openDoor==1){
choices<-c(2,3)
} else if (openDoor==2){
choices<-c(1,3)
} else if (openDoor==3){
choices<-c(1,2)
}
object@chosenDoor<-sample(choices,1)    # The player randomly chooses between doors not removed.
}
if (object@chosenDoor==object@carDoor){   # Compare chosenDoor and carDoor. If they are the same,
# assign TRUE to winner
winner<-TRUE
} else {                                  # If they are not the same, assign FALSE to winner.
winner<-FALSE
}
return(winner)
}
)
# 1) Simulate 1000 rounds of the game, player does not switch
# Function PayNoSwitch takes in argument i. The function runs the playGame method i times with switch==FALSE.
# It returns result of playGame (TRUE if car behind final door chosen, FALSE if car not behind final door chosen).
PlayNoSwitch<-function(i){
p1<-new("door", chosenDoor=1,carDoor=1,switch=F)
result<-PlayGame(p1)
return(result)
}
noSwitch<-sapply(c(1:1000),PlayNoSwitch)      # simulates the game 1,000 times, player does not switch.
tabNoSwitch<-table(noSwitch)                  # tabulates results.
perctWonNoSwitch<-tabNoSwitch[2]/1000*100     # calculates percentage of the time they win the car.
paste("Player who chose not to switch won ", perctWonNoSwitch, "% of the time.")    # reports percentage won.
noSwitch<-sapply(c(1:1000),PlayNoSwitch)      # simulates the game 1,000 times, player does not switch.
tabNoSwitch<-table(noSwitch)                  # tabulates results.
perctWonNoSwitch<-tabNoSwitch[2]/1000*100     # calculates percentage of the time they win the car.
paste("Player who chose not to switch won ", perctWonNoSwitch, "% of the time.")    # reports percentage won.
noSwitch<-sapply(c(1:1000),PlayNoSwitch)      # simulates the game 1,000 times, player does not switch.
tabNoSwitch<-table(noSwitch)                  # tabulates results.
perctWonNoSwitch<-tabNoSwitch[2]/1000*100     # calculates percentage of the time they win the car.
paste("Player who chose not to switch won ", perctWonNoSwitch, "% of the time.")    # reports percentage won.
noSwitch<-sapply(c(1:1000),PlayNoSwitch)      # simulates the game 1,000 times, player does not switch.
tabNoSwitch<-table(noSwitch)                  # tabulates results.
perctWonNoSwitch<-tabNoSwitch[2]/1000*100     # calculates percentage of the time they win the car.
paste("Player who chose not to switch won ", perctWonNoSwitch, "% of the time.")    # reports percentage won.
noSwitch<-sapply(c(1:1000),PlayNoSwitch)      # simulates the game 1,000 times, player does not switch.
tabNoSwitch<-table(noSwitch)                  # tabulates results.
perctWonNoSwitch<-tabNoSwitch[2]/1000*100     # calculates percentage of the time they win the car.
paste("Player who chose not to switch won ", perctWonNoSwitch, "% of the time.")    # reports percentage won.
noSwitch<-sapply(c(1:1000),PlayNoSwitch)      # simulates the game 1,000 times, player does not switch.
tabNoSwitch<-table(noSwitch)                  # tabulates results.
perctWonNoSwitch<-tabNoSwitch[2]/1000*100     # calculates percentage of the time they win the car.
paste("Player who chose not to switch won ", perctWonNoSwitch, "% of the time.")    # reports percentage won.
# 2) simulate 1000 rounds of the game, player does switches
# Function PayYesSwitch takes in argument i. The function runs the playGame method i times with switch==TRUE
# It returns result of playGame (TRUE if car behind final door chosen, FALSE if car not behind final door chosen).
PlayYesSwitch<-function(i){
p1<-new("door", chosenDoor=1,carDoor=1,switch=T)
result<-PlayGame(p1)
return(result)
}
yesSwitch<-sapply(c(1:1000),PlayYesSwitch)    # simulates the game 1,000 times, player does not switch.
tabYesSwitch<-table(yesSwitch)                # tabulates results.
perctWonYesSwitch<-tabYesSwitch[2]/1000*100   # calculates percentage of the time they win the car.
paste("Player who chose to switch won ", perctWonYesSwitch, "% of the time.")       # reports percentage won.
yesSwitch<-sapply(c(1:1000),PlayYesSwitch)    # simulates the game 1,000 times, player does not switch.
tabYesSwitch<-table(yesSwitch)                # tabulates results.
perctWonYesSwitch<-tabYesSwitch[2]/1000*100   # calculates percentage of the time they win the car.
paste("Player who chose to switch won ", perctWonYesSwitch, "% of the time.")       # reports percentage won.
yesSwitch<-sapply(c(1:1000),PlayYesSwitch)    # simulates the game 1,000 times, player does not switch.
tabYesSwitch<-table(yesSwitch)                # tabulates results.
perctWonYesSwitch<-tabYesSwitch[2]/1000*100   # calculates percentage of the time they win the car.
paste("Player who chose to switch won ", perctWonYesSwitch, "% of the time.")       # reports percentage won.
yesSwitch<-sapply(c(1:1000),PlayYesSwitch)    # simulates the game 1,000 times, player does not switch.
tabYesSwitch<-table(yesSwitch)                # tabulates results.
perctWonYesSwitch<-tabYesSwitch[2]/1000*100   # calculates percentage of the time they win the car.
paste("Player who chose to switch won ", perctWonYesSwitch, "% of the time.")       # reports percentage won.
yesSwitch<-sapply(c(1:1000),PlayYesSwitch)    # simulates the game 1,000 times, player does not switch.
tabYesSwitch<-table(yesSwitch)                # tabulates results.
perctWonYesSwitch<-tabYesSwitch[2]/1000*100   # calculates percentage of the time they win the car.
paste("Player who chose to switch won ", perctWonYesSwitch, "% of the time.")       # reports percentage won.
yesSwitch<-sapply(c(1:1000),PlayYesSwitch)    # simulates the game 1,000 times, player does not switch.
tabYesSwitch<-table(yesSwitch)                # tabulates results.
perctWonYesSwitch<-tabYesSwitch[2]/1000*100   # calculates percentage of the time they win the car.
paste("Player who chose to switch won ", perctWonYesSwitch, "% of the time.")       # reports percentage won.
yesSwitch<-sapply(c(1:1000),PlayYesSwitch)    # simulates the game 1,000 times, player does not switch.
tabYesSwitch<-table(yesSwitch)                # tabulates results.
perctWonYesSwitch<-tabYesSwitch[2]/1000*100   # calculates percentage of the time they win the car.
paste("Player who chose to switch won ", perctWonYesSwitch, "% of the time.")       # reports percentage won.
yesSwitch<-sapply(c(1:1000),PlayYesSwitch)    # simulates the game 1,000 times, player does not switch.
tabYesSwitch<-table(yesSwitch)                # tabulates results.
perctWonYesSwitch<-tabYesSwitch[2]/1000*100   # calculates percentage of the time they win the car.
paste("Player who chose to switch won ", perctWonYesSwitch, "% of the time.")       # reports percentage won.
yesSwitch<-sapply(c(1:1000),PlayYesSwitch)    # simulates the game 1,000 times, player does not switch.
tabYesSwitch<-table(yesSwitch)                # tabulates results.
perctWonYesSwitch<-tabYesSwitch[2]/1000*100   # calculates percentage of the time they win the car.
paste("Player who chose to switch won ", perctWonYesSwitch, "% of the time.")       # reports percentage won.
yesSwitch<-sapply(c(1:1000),PlayYesSwitch)    # simulates the game 1,000 times, player does not switch.
tabYesSwitch<-table(yesSwitch)                # tabulates results.
perctWonYesSwitch<-tabYesSwitch[2]/1000*100   # calculates percentage of the time they win the car.
paste("Player who chose to switch won ", perctWonYesSwitch, "% of the time.")       # reports percentage won.
yesSwitch<-sapply(c(1:1000),PlayYesSwitch)    # simulates the game 1,000 times, player does not switch.
tabYesSwitch<-table(yesSwitch)                # tabulates results.
perctWonYesSwitch<-tabYesSwitch[2]/1000*100   # calculates percentage of the time they win the car.
paste("Player who chose to switch won ", perctWonYesSwitch, "% of the time.")       # reports percentage won.
install.packages("devtools")
install.packages("roxygen2")
?integrate
?function
return(y)
test<-function(theta){
y=theta+3
return(y)
}
test(3)
test(theta)
test(x)
testList<-list(c(1,1),c(1,2))
length(testList)
firstDoc<-c(1,1,1,2,2,2,3,3,3,4,4,4)
secondDoc<-c(2,3,4,1,3,4,1,2,4,1,2,3)
sampleData<-as.data.frame(firstDoc,secondDoc)
sampleData<-as.data.frame(firstDoc,secondDoc,row.names=c(firstDoc,secondDoc))
sampleData<-data.frame(firstDoc,secondDoc,row.names=c(firstDoc,secondDoc))
sampleData<-data.frame(firstDoc,secondDoc,row.names=c("firstDoc", "secondDoc"))
dnorm(2, 0, 1)
pnorm(2,0,1)
a<-dnorm(2,0,1)
b<-pnorm(2,0,1)
a+b
b<-pnorm(3,0,1)
pnorm(3,0,1)
y1<-c(1,1,-1,1,-1)
g1<-c(2,3,4,5,6)
y1[1]
sum(y1)
sum(g1)
y1<-c(1,1,-1,1,-1)
g1<-c(2,3,4,5,6)
Lg<-function(y,g){
result<-c()
for (i in 1:length(y)){
x<-y[i]*g[i]
xi<-log(pnorm(x,0,1))
result<-c(result,xi)
}
output<-sum(result)
return(output)
}
Lg(y1,g1)
derivativeLg<-function(y,g){
denom<-Lg(y,g)
output<-c()
for (i in 1:length(y)){
num<-y[i]*dnorm(g[i])
output[i]<-num/denom
}
return(output)
}
derivativeLg(y1,g1)
diag(x=0,length(y),length(y))
diag(x=0,length(y1),length(y1))
diag(x=1,length(y1),length(y1))
secondDerivativeLg<-function(y,g){
LL<-Lg(y,g)
derivativeLL<-derivativeLg(y,g)
output<-diag(x=0,length(y),length(y))
for (i in 1:length(y)){
firstTerm<- ((dnorm(g[i]))^2)/LL^2
secondTerm<-g[i]*derivativeLL[i]
output[i,i]<-(-1*firstTerm)-secondTerm
}
return(output)
}
secondDerivativeLg(y1,g1)
logLike<-function(y,g){
result<-c()
for (i in 1:length(y)){
x<-y[i]*g[i]
xi<-log(pnorm(x,0,1))
result<-c(result,xi)
}
output<-sum(result)
return(output)
}
y1<-c(1,1,-1,1,-1)
g1<-c(2,3,4,5,6)
logLike(y1,g1)
dLogLike<-function(y,g){
denom<-Lg(y,g)
output<-c()
for (i in 1:length(y)){
num<-y[i]*dnorm(g[i])
output[i]<-num/denom
}
return(output)
}
y1<-c(1,1,-1,1,-1)
g1<-c(2,3,4,5,6)
logLike(y1,g1)
dLogLike(y1,g1)
denom<-logLike(y,g)
output<-c()
for (i in 1:length(y)){
num<-y[i]*dnorm(g[i])
output[i]<-num/denom
}
dLogLike<-function(y,g){
denom<-logLike(y,g)
output<-c()
for (i in 1:length(y)){
num<-y[i]*dnorm(g[i])
output[i]<-num/denom
}
return(output)
}
y1<-c(1,1,-1,1,-1)
g1<-c(2,3,4,5,6)
logLike(y1,g1)
dLogLike(y1,g1)
d2LogLike<-function(y,g){
LL<-logLike(y,g)
derivativeLL<-dLogLike(y,g)
output<-diag(x=0,length(y),length(y))
for (i in 1:length(y)){
firstTerm<- ((dnorm(g[i]))^2)/LL^2
secondTerm<-g[i]*derivativeLL[i]
output[i,i]<-(-1*firstTerm)-secondTerm
}
return(output)
}
y1<-c(1,1,-1,1,-1)
g1<-c(2,3,4,5,6)
logLike(y1,g1)
dLogLike(y1,g1)
d2LogLike(y1,g1)
dLogLike<-function(y,g){
denom<-logLike(y,g)
output<-c()
for (i in 1:length(y)){
num<-y[i]*dnorm(g[i])
output[i]<-num/denom
}
return(output)
}
y1<-c(1,1,-1,1,-1)
g1<-c(2,3,4,5,6)
logLike(y1,g1)
dLogLike<-function(y,g){
denom<-logLike(y,g)
output<-c()
for (i in 1:length(y)){
num<-y[i]*dnorm(g[i])
output[i]<-num/denom
}
return(output)
}
y1<-c(1,1,-1,1,-1)
g1<-c(2,3,4,5,6)
logLike(y1,g1)
## Load libraries
library(devtools)
library(roxygen2)
library(testthat)
## Set working directory
setwd("~/Documents/GitHub/ASP_group_project") # Gangyi
## Updates the package based on R scripts written, man and NAMESPACE automatically updates.
# Manually update DESCRIPTION if need be.
current.code <- as.package("gaussianComparisons")
load_all(current.code)
document(current.code)
check(current.code)
## Load libraries
library(devtools)
library(roxygen2)
library(testthat)
## Set working directory
setwd("~/Documents/GitHub/ASP_group_project") # Gangyi
## Updates the package based on R scripts written, man and NAMESPACE automatically updates.
# Manually update DESCRIPTION if need be.
current.code <- as.package("gaussianComparisons")
load_all(current.code)
document(current.code)
## Load libraries
library(devtools)
## Load libraries
library(devtools)
library(roxygen2)
library(testthat)
## Set working directory
setwd("~/Documents/GitHub/ASP_group_project") # Gangyi
setwd("~/Documents/Applied_Statistical_Programming/ASP_group_project") # Tyler
## Set working directory
setwd("~/Documents/GitHub/ASP_group_project") # Gangyi
## Updates the package based on R scripts written, man and NAMESPACE automatically updates.
# Manually update DESCRIPTION if need be.
current.code <- as.package("gaussianComparisons")
load_all(current.code)
document(current.code)
check(current.code)
# 2. Scrapping the section of the web page
install.packages("rvest")
library(rvest) # make it easy to work with HTML and XML
## ex1.
tdist <- read_html("http://en.wikipedia.org/wiki/Student%27s_t-distribution")# read URL (uniform resource locator): address of the webpage
tdistinfo <- html_node(tdist, ".infobox") # "." refers to a class
table <- html_table(tdistinfo, header=F)
View(table)
# or alternatively using pipe (%>%)
tdistinfo <- tdist %>%
html_node(".infobox") %>%
html_table(header = FALSE)
View(tdistinfo)
## ex1.
births <- read_html("https://www.ssa.gov/oact/babynames/numberUSbirths.html")
html_nodes(births, "table")
html_nodes(births, "table")[[1]] # left side bar
html_nodes(births, "table")[[2]] # table we want
USbirth <- html_table(html_nodes(births, "table")[[2]])
head(USbirth)
html_nodes(births, "table")
# ex3. Sports score
library(XML)
# ex3. Sports score
install.packages("XML")
install.packages("httr")
install.packages("httr")
# ex3. Sports score
# install.packages("XML")
# install.packages("httr")
library(XML)
library(httr)
ncaaurl <- "https://www.ncaa.com/scoreboard/basketball-men/d1/2018/02/24"
tables <- GET(ncaaurl)
allTables <- readHTMLTable(rawToChar(tables$content)) # rawToChar: converts bytes back to string
str(allTables)  # we can see how data is structured
oneGame <- allTables[[3]] # first, let's extract the first table
oneGame
oneGame$School
as.character(oneGame$School)
as.numeric(as.character(oneGame$Score))
## ex1.
tdist <- read_html("http://en.wikipedia.org/wiki/Student%27s_t-distribution")# read URL (uniform resource locator): address of the webpage
# 2. Scrapping the section of the web page
# install.packages("rvest")
library(rvest) # make it easy to work with HTML and XML
## ex1.
tdist <- read_html("http://en.wikipedia.org/wiki/Student%27s_t-distribution")# read URL (uniform resource locator): address of the webpage
tdistinfo <- html_node(tdist, ".infobox") # "." refers to a class
table <- html_table(tdistinfo, header=F)
