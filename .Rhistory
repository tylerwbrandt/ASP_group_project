<<<<<<< HEAD
# Create fence based on left,center,right dimensions
y_mean <- c((left/sqrt(2) + center)/2, (right/sqrt(2) + center))
x_mean <- c((left/sqrt(2))/2, (right/sqrt(2))/2)
m <- c((center-left/sqrt(2))/(left/sqrt(2)), (center-right/sqrt(2))/(right/sqrt(2)))
new_m <- c(-1/m[1], 1/m[2])
horiz <- (y_mean[2] - y_mean[1] + new_m[1]*x_mean[1] - new_m[2]*x_mean[2])/(new_m[1] = new_m[2])
vert <- new_m[1]*(horiz-x_mean[1]) + y_mean[1]
r_sq <- (horiz^2 + (center-vert)^2)
lines((-300/sqrt(2)):(right/sqrt(2)), sqrt(r_sq - ((-300/sqrt(2)):(right/sqrt(2)) - horiz)^2) + vert)
points(spray_subset$dist*cos((90-spray_subset$spray_angle)*pi/180), spray_subset$dist*sin((90-spray_subset$spray_angle)*pi/180))
}
spray_chart_hitter("tjoakld42", oakland_fsu)
spray_chart_hitter("tjoakld42", oakland_fsu, 500, 400, 300)
spray_chart_hitter("tjoakld42", oakland_fsu, 300, 400, 500)
spray_chart_hitter("tjoakld42", oakland_fsu, 300, 400, 300)
spray_chart_hitter("tjoakld42", oakland_fsu, 300, 400, 500)
spray_chart_hitter("tjoakld42", oakland_fsu, 300, 400, 400)
spray_chart_hitter("tjoakld42", oakland_fsu, 300, 400, 200)
spray_chart_hitter("tjoakld42", oakland_fsu, 300, 400, 100)
spray_chart_hitter("tjoakld42", oakland_fsu, 300, 400, 301)
spray_chart_hitter("tjoakld42", oakland_fsu, 300, 400, 350)
spray_chart_hitter("tjoakld42", oakland_fsu, 300, 400, 300)
spray_chart_hitter("tjoakld42", oakland_fsu, 300, 400, 325)
spray_chart_hitter("tjoakld42", oakland_fsu, 350, 400, 300)
spray_chart_hitter("tjoakld42", oakland_fsu, 300, 400, 300)
left <- 300
center <- 400
right <- 300
plot(-300:300, 0:600, type = "n", bg = "white")
lines(c(0,90/sqrt(2),0,-90/sqrt(2),0),c(0,90/sqrt(2),180/sqrt(2),90/sqrt(2),0), col=c("black"))
lines(c(0,right/sqrt(2)), c(0,right/sqrt(2)), col = c("black"))
lines(c(0,-left/sqrt(2)), c(0,left/sqrt(2)), col = c("black"))
spray_chart_hitter <- function(hitter, data, left = 300, center = 400, right = 300){
spray_subset <- subset(data, hitter_id == hitter, !is.na(spray_angle))
plot(-300:300, 0:600, type = "n", bg = "white", axes = FALSE)
# Create field outline
lines(c(0,90/sqrt(2),0,-90/sqrt(2),0),c(0,90/sqrt(2),180/sqrt(2),90/sqrt(2),0), col=c("black"))
lines(c(0,right/sqrt(2)), c(0,right/sqrt(2)), col = c("black"))
lines(c(0,-left/sqrt(2)), c(0,left/sqrt(2)), col = c("black"))
# Create fence based on left,center,right dimensions
y_mean <- c((left/sqrt(2) + center)/2, (right/sqrt(2) + center))
x_mean <- c((left/sqrt(2))/2, (right/sqrt(2))/2)
m <- c((center-left/sqrt(2))/(left/sqrt(2)), (center-right/sqrt(2))/(right/sqrt(2)))
new_m <- c(-1/m[1], 1/m[2])
horiz <- (y_mean[2] - y_mean[1] + new_m[1]*x_mean[1] - new_m[2]*x_mean[2])/(new_m[1] = new_m[2])
vert <- new_m[1]*(horiz-x_mean[1]) + y_mean[1]
r_sq <- (horiz^2 + (center-vert)^2)
lines((-left/sqrt(2)):(right/sqrt(2)), sqrt(r_sq - ((-left/sqrt(2)):(right/sqrt(2)) - horiz)^2) + vert)
points(spray_subset$dist*cos((90-spray_subset$spray_angle)*pi/180), spray_subset$dist*sin((90-spray_subset$spray_angle)*pi/180))
}
spray_chart_hitter("tjoakld42", oakland_fsu, 300, 400, 300)
y_mean <- c((left/sqrt(2) + center)/2, (right/sqrt(2) + center))
x_mean <- c((left/sqrt(2))/2, (right/sqrt(2))/2)
y_mean <- c((left/sqrt(2) + center)/2, (right/sqrt(2) + center)/2)
spray_chart_hitter <- function(hitter, data, left = 300, center = 400, right = 300){
spray_subset <- subset(data, hitter_id == hitter, !is.na(spray_angle))
plot(-300:300, 0:600, type = "n", bg = "white", axes = FALSE)
# Create field outline
lines(c(0,90/sqrt(2),0,-90/sqrt(2),0),c(0,90/sqrt(2),180/sqrt(2),90/sqrt(2),0), col=c("black"))
lines(c(0,right/sqrt(2)), c(0,right/sqrt(2)), col = c("black"))
lines(c(0,-left/sqrt(2)), c(0,left/sqrt(2)), col = c("black"))
# Create fence based on left,center,right dimensions
y_mean <- c((left/sqrt(2) + center)/2, (right/sqrt(2) + center)/2)
x_mean <- c((left/sqrt(2))/2, (right/sqrt(2))/2)
m <- c((center-left/sqrt(2))/(left/sqrt(2)), (center-right/sqrt(2))/(right/sqrt(2)))
new_m <- c(-1/m[1], 1/m[2])
horiz <- (y_mean[2] - y_mean[1] + new_m[1]*x_mean[1] - new_m[2]*x_mean[2])/(new_m[1] = new_m[2])
vert <- new_m[1]*(horiz-x_mean[1]) + y_mean[1]
r_sq <- (horiz^2 + (center-vert)^2)
lines((-left/sqrt(2)):(right/sqrt(2)), sqrt(r_sq - ((-left/sqrt(2)):(right/sqrt(2)) - horiz)^2) + vert)
points(spray_subset$dist*cos((90-spray_subset$spray_angle)*pi/180), spray_subset$dist*sin((90-spray_subset$spray_angle)*pi/180))
}
spray_chart_hitter("tjoakld42", oakland_fsu, 300, 400, 300)
spray_chart_hitter("tjoakld42", oakland_fsu)
m <- c((center-left/sqrt(2))/(left/sqrt(2)), (center-right/sqrt(2))/(right/sqrt(2)))
new_m <- c(-1/m[1], 1/m[2])
horiz <- (y_mean[2] - y_mean[1] + new_m[1]*x_mean[1] - new_m[2]*x_mean[2])/(new_m[1] = new_m[2])
vert <- new_m[1]*(horiz-x_mean[1]) + y_mean[1]
spray_chart_hitter <- function(hitter, data, left = 300, center = 400, right = 300){
spray_subset <- subset(data, hitter_id == hitter, !is.na(spray_angle))
plot(-300:300, 0:600, type = "n", bg = "white", axes = FALSE)
# Create field outline
lines(c(0,90/sqrt(2),0,-90/sqrt(2),0),c(0,90/sqrt(2),180/sqrt(2),90/sqrt(2),0), col=c("black"))
lines(c(0,right/sqrt(2)), c(0,right/sqrt(2)), col = c("black"))
lines(c(0,-left/sqrt(2)), c(0,left/sqrt(2)), col = c("black"))
# Create fence based on left,center,right dimensions
y_mean <- c((left/sqrt(2) + center)/2, (right/sqrt(2) + center)/2)
x_mean <- c((left/sqrt(2))/2, (right/sqrt(2))/2)
m <- c((center-left/sqrt(2))/(left/sqrt(2)), (center-right/sqrt(2))/(right/sqrt(2)))
new_m <- c(-1/m[1], 1/m[2])
horiz <- (y_mean[2] - y_mean[1] + new_m[1]*x_mean[1] - new_m[2]*x_mean[2])/(new_m[1] - new_m[2])
vert <- new_m[1]*(horiz-x_mean[1]) + y_mean[1]
r_sq <- (horiz^2 + (center-vert)^2)
lines((-left/sqrt(2)):(right/sqrt(2)), sqrt(r_sq - ((-left/sqrt(2)):(right/sqrt(2)) - horiz)^2) + vert)
points(spray_subset$dist*cos((90-spray_subset$spray_angle)*pi/180), spray_subset$dist*sin((90-spray_subset$spray_angle)*pi/180))
}
spray_chart_hitter("tjoakld42", oakland_fsu)
horiz <- (y_mean[2] - y_mean[1] + new_m[1]*x_mean[1] - new_m[2]*x_mean[2])/(new_m[1] - new_m[2])
new_m <- c(1/m[1], 1/m[2])
new_m <- c(-1/m[1], 1/m[2])
new_m <- c(-1/m[1], 1/m[2])
horiz <- (y_mean[2] - y_mean[1] + new_m[1]*x_mean[1] - new_m[2]*x_mean[2])/(new_m[1] - new_m[2])
horiz <- (y_mean[2] - y_mean[1] + new_m[1]*x_mean[1] - new_m[2]*x_mean[2])/(new_m[1] - new_m[2])
spray_chart_hitter <- function(hitter, data, left = 300, center = 400, right = 300){
spray_subset <- subset(data, hitter_id == hitter, !is.na(spray_angle))
plot(-300:300, 0:600, type = "n", bg = "white", axes = FALSE)
# Create field outline
lines(c(0,90/sqrt(2),0,-90/sqrt(2),0),c(0,90/sqrt(2),180/sqrt(2),90/sqrt(2),0), col=c("black"))
lines(c(0,right/sqrt(2)), c(0,right/sqrt(2)), col = c("black"))
lines(c(0,-left/sqrt(2)), c(0,left/sqrt(2)), col = c("black"))
# Create fence based on left,center,right dimensions
y_mean <- c((left/sqrt(2) + center)/2, (right/sqrt(2) + center)/2)
x_mean <- c(-(left/sqrt(2))/2, (right/sqrt(2))/2)
m <- c((center-left/sqrt(2))/(left/sqrt(2)), (center-right/sqrt(2))/(right/sqrt(2)))
new_m <- c(-1/m[1], 1/m[2])
horiz <- (y_mean[2] - y_mean[1] + new_m[1]*x_mean[1] - new_m[2]*x_mean[2])/(new_m[1] - new_m[2])
vert <- new_m[1]*(horiz-x_mean[1]) + y_mean[1]
r_sq <- (horiz^2 + (center-vert)^2)
lines((-left/sqrt(2)):(right/sqrt(2)), sqrt(r_sq - ((-left/sqrt(2)):(right/sqrt(2)) - horiz)^2) + vert)
points(spray_subset$dist*cos((90-spray_subset$spray_angle)*pi/180), spray_subset$dist*sin((90-spray_subset$spray_angle)*pi/180))
}
spray_chart_hitter("tjoakld42", oakland_fsu)
debug(by.var.lm)
by.var.lm(chalquality, voteshare ~ year, OOS, 2)
undebug(by.var.lm)
debug(spray_chart_hitter)
spray_chart_hitter("tjoakld42", oakland_fsu)
function(hitter, data, left = 300, center = 400, right = 300){
spray_subset <- subset(data, hitter_id == hitter, !is.na(spray_angle))
plot(-300:300, 0:600, type = "n", bg = "white", axes = FALSE)
# Create field outline
lines(c(0,90/sqrt(2),0,-90/sqrt(2),0),c(0,90/sqrt(2),180/sqrt(2),90/sqrt(2),0), col=c("black"))
lines(c(0,right/sqrt(2)), c(0,right/sqrt(2)), col = c("black"))
lines(c(0,-left/sqrt(2)), c(0,left/sqrt(2)), col = c("black"))
# Create fence based on left,center,right dimensions
y_mean <- c((left/sqrt(2) + center)/2, (right/sqrt(2) + center)/2)
x_mean <- c(-(left/sqrt(2))/2, (right/sqrt(2))/2)
m <- c((center-left/sqrt(2))/(left/sqrt(2)), (center-right/sqrt(2))/(right/sqrt(2)))
new_m <- c(-1/m[1], 1/m[2])
horiz <- (y_mean[2] - y_mean[1] + new_m[1]*x_mean[1] - new_m[2]*x_mean[2])/(new_m[1] - new_m[2])
vert <- new_m[1]*(horiz-x_mean[1]) + y_mean[1]
r_sq <- (horiz^2 + (center-vert)^2)
lines((-left/sqrt(2)):(right/sqrt(2)), sqrt(r_sq - ((-left/sqrt(2)):(right/sqrt(2)) - horiz)^2) + vert)
points(spray_subset$dist*cos((90-spray_subset$spray_angle)*pi/180), spray_subset$dist*sin((90-spray_subset$spray_angle)*pi/180))
}
spray_subset <- subset(data, hitter_id == hitter, !is.na(spray_angle))
plot(-300:300, 0:600, type = "n", bg = "white", axes = FALSE)
undebug(spray_chart_hitter)
spray_chart_hitter("tj42oakld", oakland_fsu)
x = <- (121 +- sqrt(121^2 - 4 * 2 * (-4439.75))/4
x <- (121 +- sqrt(121^2 - 4 * 2 * (-4439.75))/4
)
x <- (121 + sqrt(121^2 - 4 * 2 * (-4439.75)))/4
x <- (121 - sqrt(121^2 - 4 * 2 * (-4439.75)))/4
x <- (121 + sqrt(121^2 - 4 * 2 * (-4439.75)))/4
x*sqrt(2)
spray_chart_hitter <- function(hitter, data, left = 300, center = 400, right = 300){
spray_subset <- subset(data, hitter_id == hitter, !is.na(spray_angle))
plot(-300:300, 0:600, type = "n", bg = "white", axes = FALSE)
# Create field outline
lines(c(0,90/sqrt(2),0,-90/sqrt(2),0),c(0,90/sqrt(2),180/sqrt(2),90/sqrt(2),0), col=c("black"))
lines(c(0,right/sqrt(2)), c(0,right/sqrt(2)), col = c("black"))
lines(c(0,-left/sqrt(2)), c(0,left/sqrt(2)), col = c("black"))
# Create fence based on left,center,right dimensions
y_mean <- c((left/sqrt(2) + center)/2, (right/sqrt(2) + center)/2)
x_mean <- c(-(left/sqrt(2))/2, (right/sqrt(2))/2)
m <- c((center-left/sqrt(2))/(left/sqrt(2)), (center-right/sqrt(2))/(right/sqrt(2)))
new_m <- c(-1/m[1], 1/m[2])
horiz <- (y_mean[2] - y_mean[1] + new_m[1]*x_mean[1] - new_m[2]*x_mean[2])/(new_m[1] - new_m[2])
vert <- new_m[1]*(horiz-x_mean[1]) + y_mean[1]
r_sq <- (horiz^2 + (center-vert)^2)
lines((-left/sqrt(2)):(right/sqrt(2)), sqrt(r_sq - ((-left/sqrt(2)):(right/sqrt(2)) - horiz)^2) + vert)
points(spray_subset$dist*cos((90-spray_subset$spray_angle)*pi/180), spray_subset$dist*sin((90-spray_subset$spray_angle)*pi/180))
points((-(121 + sqrt(121^2 - 4 * 2 * (-4439.75)))/4):((121 + sqrt(121^2 - 4 * 2 * (-4439.75)))/4),
sqrt(95^2 - ((-(121 + sqrt(121^2 - 4 * 2 * (-4439.75)))/4):((121 + sqrt(121^2 - 4 * 2 * (-4439.75)))/4))^2) + 60.5)
}
spray_chart_hitter("tj42oakld", oakland_fsu)
spray_chart_hitter <- function(hitter, data, left = 300, center = 400, right = 300){
spray_subset <- subset(data, hitter_id == hitter, !is.na(spray_angle))
plot(-300:300, 0:600, type = "n", bg = "white", axes = FALSE)
# Create field outline
lines(c(0,90/sqrt(2),0,-90/sqrt(2),0),c(0,90/sqrt(2),180/sqrt(2),90/sqrt(2),0), col=c("black"))
lines(c(0,right/sqrt(2)), c(0,right/sqrt(2)), col = c("black"))
lines(c(0,-left/sqrt(2)), c(0,left/sqrt(2)), col = c("black"))
# Create fence based on left,center,right dimensions
y_mean <- c((left/sqrt(2) + center)/2, (right/sqrt(2) + center)/2)
x_mean <- c(-(left/sqrt(2))/2, (right/sqrt(2))/2)
m <- c((center-left/sqrt(2))/(left/sqrt(2)), (center-right/sqrt(2))/(right/sqrt(2)))
new_m <- c(-1/m[1], 1/m[2])
horiz <- (y_mean[2] - y_mean[1] + new_m[1]*x_mean[1] - new_m[2]*x_mean[2])/(new_m[1] - new_m[2])
vert <- new_m[1]*(horiz-x_mean[1]) + y_mean[1]
r_sq <- (horiz^2 + (center-vert)^2)
lines((-left/sqrt(2)):(right/sqrt(2)), sqrt(r_sq - ((-left/sqrt(2)):(right/sqrt(2)) - horiz)^2) + vert)
points(spray_subset$dist*cos((90-spray_subset$spray_angle)*pi/180), spray_subset$dist*sin((90-spray_subset$spray_angle)*pi/180))
lines((-(121 + sqrt(121^2 - 4 * 2 * (-4439.75)))/4):((121 + sqrt(121^2 - 4 * 2 * (-4439.75)))/4),
sqrt(95^2 - ((-(121 + sqrt(121^2 - 4 * 2 * (-4439.75)))/4):((121 + sqrt(121^2 - 4 * 2 * (-4439.75)))/4))^2) + 60.5)
}
spray_chart_hitter("tj42oakld", oakland_fsu)
x <- (121 + sqrt(121^2 - 4 * 2 * (60.5^2-90^2)))/4
x <- (121 + sqrt(121^2 - 4 * 2 * (60.5^2-90^2)))/4
x <- (121 + sqrt(121^2 - 4 * 2 * (60.5^2-95^2)))/4
spray_chart_hitter <- function(hitter, data, left = 300, center = 400, right = 300){
spray_subset <- subset(data, hitter_id == hitter, !is.na(spray_angle))
plot(-300:300, 0:600, type = "n", bg = "white", axes = FALSE)
# Create field outline
lines(c(0,90/sqrt(2),0,-90/sqrt(2),0),c(0,90/sqrt(2),180/sqrt(2),90/sqrt(2),0), col=c("black"))
lines(c(0,right/sqrt(2)), c(0,right/sqrt(2)), col = c("black"))
lines(c(0,-left/sqrt(2)), c(0,left/sqrt(2)), col = c("black"))
# Create fence based on left,center,right dimensions
y_mean <- c((left/sqrt(2) + center)/2, (right/sqrt(2) + center)/2)
x_mean <- c(-(left/sqrt(2))/2, (right/sqrt(2))/2)
m <- c((center-left/sqrt(2))/(left/sqrt(2)), (center-right/sqrt(2))/(right/sqrt(2)))
new_m <- c(-1/m[1], 1/m[2])
horiz <- (y_mean[2] - y_mean[1] + new_m[1]*x_mean[1] - new_m[2]*x_mean[2])/(new_m[1] - new_m[2])
vert <- new_m[1]*(horiz-x_mean[1]) + y_mean[1]
r_sq <- (horiz^2 + (center-vert)^2)
lines((-left/sqrt(2)):(right/sqrt(2)), sqrt(r_sq - ((-left/sqrt(2)):(right/sqrt(2)) - horiz)^2) + vert)
points(spray_subset$dist*cos((90-spray_subset$spray_angle)*pi/180), spray_subset$dist*sin((90-spray_subset$spray_angle)*pi/180))
lines((-(121 + sqrt(121^2 - 4 * 2 * (-4439.75)))/4):((121 + sqrt(121^2 - 4 * 2 * (-4439.75)))/4),
sqrt(95^2 - ((-(121 + sqrt(121^2 - 4 * 2 * (60.5^2 - 95^2)))/4):((121 + sqrt(121^2 - 4 * 2 * (60.5^2-95^2)))/4))^2) + 60.5)
}
spray_chart_hitter("tj42oakld", oakland_fsu)
spray_chart_hitter <- function(hitter, data, left = 300, center = 400, right = 300){
spray_subset <- subset(data, hitter_id == hitter, !is.na(spray_angle))
plot(-300:300, 0:600, type = "n", bg = "white", axes = FALSE)
# Create field outline
lines(c(0,90/sqrt(2),0,-90/sqrt(2),0),c(0,90/sqrt(2),180/sqrt(2),90/sqrt(2),0), col=c("black"))
lines(c(0,right/sqrt(2)), c(0,right/sqrt(2)), col = c("black"))
lines(c(0,-left/sqrt(2)), c(0,left/sqrt(2)), col = c("black"))
# Create fence based on left,center,right dimensions
y_mean <- c((left/sqrt(2) + center)/2, (right/sqrt(2) + center)/2)
x_mean <- c(-(left/sqrt(2))/2, (right/sqrt(2))/2)
m <- c((center-left/sqrt(2))/(left/sqrt(2)), (center-right/sqrt(2))/(right/sqrt(2)))
new_m <- c(-1/m[1], 1/m[2])
horiz <- (y_mean[2] - y_mean[1] + new_m[1]*x_mean[1] - new_m[2]*x_mean[2])/(new_m[1] - new_m[2])
vert <- new_m[1]*(horiz-x_mean[1]) + y_mean[1]
r_sq <- (horiz^2 + (center-vert)^2)
lines((-left/sqrt(2)):(right/sqrt(2)), sqrt(r_sq - ((-left/sqrt(2)):(right/sqrt(2)) - horiz)^2) + vert)
points(spray_subset$dist*cos((90-spray_subset$spray_angle)*pi/180), spray_subset$dist*sin((90-spray_subset$spray_angle)*pi/180))
lines((-(121 + sqrt(121^2 - 4 * 2 * (60.5^2-95^2)))/4):((121 + sqrt(121^2 - 4 * 2 * (60.5^2-95^2)))/4),
sqrt(95^2 - ((-(121 + sqrt(121^2 - 4 * 2 * (60.5^2 - 95^2)))/4):((121 + sqrt(121^2 - 4 * 2 * (60.5^2-95^2)))/4))^2) + 60.5)
}
spray_chart_hitter("tj42oakld", oakland_fsu)
plot (-250:250, 0:500, type="n", bg="white", axes = FALSE)
lines(c(0,90/sqrt(2),0,-90/sqrt(2),0),c(0,90/sqrt(2),180/sqrt(2),90/sqrt(2),0), col=c("black"))
lines(c(0,300/sqrt(2)), c(0,300/sqrt(2)), col = c("black"))
lines(c(0,-300/sqrt(2)), c(0,300/sqrt(2)), col = c("black"))
hits <- subset(oakland_fsu, !is.na(spray_angle))
points(hits$dist..ft.*cos((90-hits$spray_angle)*pi/180), hits$dist..ft.*sin((90-hits$spray_angle)*pi/180))
lines((-300/sqrt(2)):(300/sqrt(2)), sqrt((400-value)^2-((-300/sqrt(2)):(300/sqrt(2)))^2) + value)
points(hits$dist..ft.*cos((90-hits$spray_angle)*pi/180), hits$dist..ft.*sin((90-hits$spray_angle)*pi/180))
points(160*cos((90-42)*pi/180), 160*sin((90-42)*pi/180))
library(plyr)
bips_17 <- read.csv("~/Documents/Wash U Sports Analytics/SABR18/Batted_Balls_17.csv", stringsAsFactors = FALSE)
launch_angles <- bips_17[, c("player_name", "launch_angle")]
avg_launch_angles <- aggregate(launch_angles$launch_angle, by = list(launch_angles$player_name), FUN = mean)
bips_count <- count(launch_angles, "player_name")
colnames(bips_count) <- c("player_name", "bips")
avg_launch_angles <- merge(bips_count, avg_launch_angles,
by.x = "player_name", by.y = "Group.1")
colnames(avg_launch_angles) <- c("player_name", "bips", "avg_launch")
bips_17$hit <- ifelse(bips_17$events == "single" | bips_17$events == "double" | bips_17$events == "triple" | bips_17$events == "home_run",
1,0)
rm(list = ls())
library(devtools)
library(roxygen2)
library(testthat)
setwd("~/Documents/Applied_Statistical_Programming/ASP_group_project") # Tyler
current.code <- as.package("gaussianComparisons")
load_all(current.code)
document(current.code)
lowercaseH <- function(x){
part1 <- -x * log(x)
part2 <- (1-x) * log(1-x)
output <- part1 - part2
return (output)
}
lowercaseH(.5)
install.packages("mvtnorm")
library(mvtnorm)
View(data_montgomery)
View(montgomery_data)
View(exampleHITs)
load("Data/exampleHITs.csv")
mvnorm(x)
library(readr)
data_mont <- read_csv("~/Documents/Applied_Statistical_Programming/ASP_group_project/Data/exampleHITs.csv")
View(exampleHITs)
View(data_mont)
rhoSquaredMaker(5069, 5097, data_mont, rep(0, 250), 2, .01)
rhoSquaredMaker <- function(doc1, doc2, dataset, g, sigma, tolerance){
cleaned_data <- cleaner(dataset)
omega1 <- omega(dataset, sigma)
g_hat <- newtonMethod(omega1, g, cleaned_data$y, tolerance)
little_omega <- rep(0, nrow(cleaned_data))
for (i in 1:nrow(cleaned_data)){
if (doc1 == cleaned_data$first[i]){
little_omega[i] <- little_omega[i] + sigma^2
}
if (doc1 == cleaned_data$second[i]){
little_omega[i] <- little_omega[i] - sigma^2
}
if (doc2 == cleaned_data$first[i]){
little_omega[i] <- little_omega[i] - sigma^2
}
if (doc2 == cleaned_data$second[i]){
little_omega[i] <- little_omega[i] + sigma^2
}
}
little_omega_t <- t(little_omega)
omega_hat <- -1*solve(d2Psi(omega1, g_hat, cleaned_data$y))
matrix_mult1 <- omega_hat %*% little_omega
matrix_mult2 <- little_omega_t %*% matrix_mult1
rho_squared <- 2 * sigma^2 - matrix_mult2[1][1]
return(rho_squared)
}
rhoSquaredMaker(5069, 5097, data_mont, rep(0, 250), 2, .01)
rhoSquaredMaker <- function(doc1, doc2, dataset, g, sigma, tolerance){
browser()
cleaned_data <- cleaner(dataset)
omega1 <- omega(dataset, sigma)
g_hat <- newtonMethod(omega1, g, cleaned_data$y, tolerance)
little_omega <- rep(0, nrow(cleaned_data))
for (i in 1:nrow(cleaned_data)){
if (doc1 == cleaned_data$first[i]){
little_omega[i] <- little_omega[i] + sigma^2
}
if (doc1 == cleaned_data$second[i]){
little_omega[i] <- little_omega[i] - sigma^2
}
if (doc2 == cleaned_data$first[i]){
little_omega[i] <- little_omega[i] - sigma^2
}
if (doc2 == cleaned_data$second[i]){
little_omega[i] <- little_omega[i] + sigma^2
}
}
little_omega_t <- t(little_omega)
omega_hat <- -1*solve(d2Psi(omega1, g_hat, cleaned_data$y))
matrix_mult1 <- omega_hat %*% little_omega
matrix_mult2 <- little_omega_t %*% matrix_mult1
rho_squared <- 2 * sigma^2 - matrix_mult2[1][1]
return(rho_squared)
}
rhoSquaredMaker(5069, 5097, data_mont, rep(0, 250), 2, .01)
View(cleaned_data)
View(omega1)
g_hat
View(little_omega)
little_omega
little_omega_t
View(omega_hat)
View(matrix_mult2)
View(matrix_mult1)
data(VADeaths)
VADeaths # look at the data
barplot(VADeaths, # specify the dataset
beside = T, # put the bars next to eachother.  What happens when this is FALSE?
legend = T, # Include a legend
ylim=c(0,90), # the the range of the y-axis that will be plotted
ylab="Deaths per 1000", # Label the y-axis
main = "Death rates in Virginia")# put a title on the main
webData<-url("http://pages.wustl.edu/montgomery/incumbents2.txt")
OOS <- read.table(webData)
attach(OOS)
VoteShare<-t(matrix(by(voteshare, list(year, chalquality), mean, na.rm=TRUE)
, ncol=2))
VoteShare # Vote share by year and challenger quality
rownames(VoteShare)<-c("Inexperienced", "Experienced")
colnames(VoteShare)<-unique(year)
barplot(VoteShare, beside=T, legend=T, ylim=c(0,.90))
VoteShare.early<-VoteShare[,1:10]
dotchart(VoteShare.early,
xlim=c(0,.90), # The limits for the x-axis
xlab="Share of two-party vote",
main="It's good to draw a bad challenger",
pch = 19) # this controls the kind of point that is plotted
VoteShare.late<-VoteShare[,11:20]
my.dot.plotter<-function(){ # i'm making this a function so I don't have to copy and paste below
dotchart(VoteShare.early,
xlim=c(.4,.7), # The limits for the x-axis
xlab="Share of two-party vote",
main="1956-1972",
pch = 19) # this controls the kind of point that is plotted
dotchart(VoteShare.late,
xlim=c(.4,.7), # The limits for the x-axis
xlab="Share of two-party vote",
main="1974-1994",
pch = 19) # this controls the kind of point that is plotted
}
par(mfrow=c(1,2))# The par() function controls the basic graphic parameters in R
?par
my.dot.plotter()
par(mfrow=c(1,2), mar=c(2,2,2,1))# The mar( ) option controls the margins of the internal plot
?par # let's find the mar option
my.dot.plotter()
par(mfrow=c(1,1)) # resetting back to just one kind.  Alternatively, you could just close the device
hist(voteshare)
hist(voteshare, breaks = "SCOTT") # we can change how many "bins" the plot makes
hist(voteshare, breaks = "Freedman-Diaconis")
hist(voteshare, breaks = 20) # or we can set it manually
plot(density(voteshare, na.rm=TRUE)) #
rug(voteshare)
hist(voteshare*100, probability=TRUE, ylim=c(0,.04)
, main = "Incumbent Share of two-party vote"
, xlab="Vote Share")
lines(density(voteshare*100, na.rm=TRUE), lty=2)
rug(voteshare*100)
hist(voteshare*100, probability=TRUE, ylim=c(0,.04)
, main = "Incumbent Share of two-party vote", xlab="Vote Share")
high.quality.y<-density(voteshare[chalquality==1]*100, na.rm=TRUE)$y*mean(chalquality, na.rm=TRUE)
high.quality.x<-density(voteshare[chalquality==1]*100, na.rm=TRUE)$x
high.quality.x
low.quality.y<-density(voteshare[chalquality==0]*100, na.rm=TRUE)$y*mean(chalquality, na.rm=TRUE)
low.quality.x<-density(voteshare[chalquality==0]*100, na.rm=TRUE)$x
lines(high.quality.x, high.quality.y, lty=2, col="red")
lines(low.quality.x, low.quality.y, lty=3, col="blue")
lines(density(voteshare*100, na.rm=TRUE), lty=1) # lines will add a line to an exiting plot.  lty=2 specifies a dashed line
col1 <- rgb(1, 0, 0, alpha=.05)
col2 <- rgb(0, 0, 1, alpha=.05)
rug(voteshare[chalquality==1]*100, col=col1)
rug(voteshare[chalquality==0]*100, col=col2)
legend("topright",
legend=c("All", "Low-Quality", "High-Quality"),
lty=c(1,3,2),
col=c("black", "blue", "red"),
title="Legend")
boxplot(voteshare ~ inparty)
args(plot.default) # see the basics of the plot funciton
xaxis<-c(1:12) # think of this as time periods
econ.inds<-c(2,3,3.5, 2, 3, 2.5, 3, 2.5, 3, 3.5,4,4)
econ.reps <- econ.inds + 2
econ.dems <- econ.inds - 1
plot(xaxis, econ.inds) # this is your standard default plot.  The default is type="p"
plot(xaxis, econ.inds, type="l") # lines
plot(xaxis, econ.inds, type="n") #nothing
plot(xaxis, econ.inds, type="o") # both points and lines
plot(xaxis, econ.inds, type="h") # a sort of fake histogram with lines
plot(xaxis, econ.inds, type="s") # stair steps
plot(NULL, xlim=c(1, 12), ylim=c(2,4))
points(xaxis, econ.inds, type="b")
plot(NULL, xlim=c(1, 12), ylim=c(2,4))
points(xaxis, econ.inds, type="l")
plot(NULL, xlim=c(1, 12), ylim=c(2,4))
lines(xaxis, econ.inds)
dev.off()
par(mar=c(3,3,1,1))
plot(NULL, xlim=c(1, 12), ylim=c(2,4), xaxt="n", yaxt="n", ylab="", xlab="", bty="n")
plot(NULL, xlim=c(1, 12), ylim=c(2,4), axes=F, ylab="", xlab="")
box(lwd=2) #lwd tells how thick to draw the lines
lines(xaxis, econ.inds)
axis(side=2)
mtext(side=2, "Perceptions of the economy", padj=-3)
mtext(side=1, padj=0, c(1972:1983), at=c(1:12))
mtext(side=1, padj=2, "Year")
title("Economic approval of independents", cex=3) # the any option including the characters "cex" is about font-size
plot(xaxis, econ.inds, type="o", lwd=2, pch=5, ylim=c(0, 6.5), axes=F, xlab="", ylab=" Average Perception of Economy")
points(xaxis, econ.dems, type="o", lwd=2, pch="D", col="blue")
points(xaxis, econ.reps, type="o", lwd=2, pch="R", col="red", ylim=c(0, 6.5))
axis(side=1, at = c(2,4, 6, 8, 10, 12), labels=c("Feb", "Apr", "June", "Aug", "Oct", "Dec"))
axis(side=2)
box()
text(2.25, 6.26, "Republicans", cex=1.2)
text(6, 3.7, "Independents", cex=1.2)
text(10.5, 1.2, "Democrats", cex=1.2)
text(c(2.25,6, 10.5),c(6.26, 3.7, 1.2), c("Republicans", "Independents", "Democrats"), cex=1.2)
arrows(2, 6.05, 3, 5.65, length=.10, lwd=2)
arrows(5.75, 3.5, 6.75, 3.1, length=.1, lwd=2)
arrows(10.25, 1.35, 9.25, 1.75, length=.10, lwd=2)
abline(lm(econ.reps~xaxis), col="red", lty=2)
abline(lm(econ.inds~xaxis), col="black", lty=2)
abline(lm(econ.dems~xaxis), col="blue", lty=2)
title("Perception of the economy by party")
par(mfrow=c(m, n) # Tells R to drow m rows and n columns of plots rather than drawing a new one
mfg=c(i, j),# says to draw the figure in row i and cllumn j next
ask=TRUE, # tlls R to ask the user before erasing a plot to draw a new one
cex=1.5, # controls the font size for all font in the plot
mar=c(side1, side2, side3, side4), # sets margins for each plot on bottom, left, top, right
oma = c(side1, side2, side3, side4), # sets margins for the outer
## margins of the entire arra of plots
usr = c(x1, x2, x3, x4) # sets the coordinate system of the plot.  E.g., what region should be plotted
)
dev.off()
plot(xaxis, econ.inds, type="o", lwd=2, pch=5, ylim=c(0, 6.5), axes=F, xlab="", ylab=" Average Perception of Economy")
points(xaxis, econ.dems, type="o", lwd=2, pch="D", col="blue")
points(xaxis, econ.reps, type="o", lwd=2, pch="R", col="red", ylim=c(0, 6.5), axis=F)
axis(side=1, at = c(2,4, 6, 8, 10, 12), labels=c("Feb", "Apr", "June", "Aug", "Oct", "Dec"))
axis(side=2)
box()
text(2.25, 6.26, "Republicans", cex=1.2)
text(6, 3.7, "Independents", cex=1.2)
text(10.5, 1.2, "Democrats", cex=1.2)
text(c(2.25,6, 10.5),c(6.26, 3.7, 1.2), c("Republicans", "Independents", "Democrats"), cex=1.2)
arrows(2, 6.05, 3, 5.65, length=.10, lwd=2)
arrows(5.75, 3.5, 6.75, 3.1, length=.1, lwd=2)
arrows(10.25, 1.35, 9.25, 1.75, length=.10, lwd=2)
abline(lm(econ.reps~xaxis), col="red", lty=2)
abline(lm(econ.inds~xaxis), col="black", lty=2)
abline(lm(econ.dems~xaxis), col="blue", lty=2)
title("Perception of the economy by party")
dev.off()
dev.off()
par(fig=c(0,0.8,0,0.8), new=TRUE)
plot(mtcars$wt, mtcars$mpg, xlab="Miles Per Gallon",
ylab="Car Weight")
par(fig=c(0,0.8,0.55,1), new=TRUE)
boxplot(mtcars$wt, horizontal=TRUE, axes=FALSE)
par(fig=c(0.65,1,0,0.8),new=TRUE)
boxplot(mtcars$mpg, axes=FALSE)
mtext("Enhanced Scatterplot", side=3, outer=TRUE, line=-3)
dev.off()
plot(2,2)
=======
plot(output.vector, type="l") # does that seem a bit cyclical to you?
## Now we might think -- there is a more general case where I want to
## get a bunch of seperate regression estimates on defined subsets of
## the data.
by.var.lm<-function(by.var, formula, data, coef.num){
attach(data)
output.vector<-NULL
for (i in unique(by.var)){
output.vector[which(unique(by.var) == i)]<- lm(formula,
data=data[by.var == i,])$coefficients[coef.num]
}
detach(data)
return(output.vector)
}
plot(by.var.lm(year, voteshare~inparty, OOS, 2), type="l")
# Now I save it for later use
dump("by.var.lm", "by.var.lm.R")
getwd()
rm(by.var.lm)
## Later on I am working with another dataset
website<-url("http://pages.wustl.edu/montgomery/titanic")
titanic<-read.delim(website)
table(titanic$Gender)
table(titanic$Class)
## I want to know how survival is related to gender within each class
source("by.var.lm.R")
by.var.lm(Class, (as.numeric(Survived)-1) ~ Gender, titanic, 2)
sum(sample(1:20, size = 1, replace= TRUE ))
sum(sample(1:20, size = 1, replace= TRUE ))
sum(sample(1:20, size = 1, replace= TRUE ))
sum(sample(1:20, size = 1, replace= TRUE ))
sum(sample(1:20, size = 1, replace= TRUE ))
sum(sample(1:20, size = 1, replace= TRUE )
sum(sample(1:20, size = 1, replace= TRUE )
)
sum(sample(1:20, size = 1, replace= TRUE ))
sum(sample(1:20, size = 1, replace= TRUE ))
sum(sample(1:20, size = 1, replace= TRUE ))
sum(sample(1:100, size = 1, replace = TRUE))
sum(sample(1:100, size = 1, replace = TRUE))
sum(sample(1:100, size = 1, replace = TRUE))
sum(sample(1:100, size = 1, replace = TRUE))
sum(sample(1:100, size = 1, replace = TRUE))
sum(sample(1:100, size = 1, replace = TRUE))
sum(sample(1:100, size = 1, replace = TRUE))
sum(sample(1:100, size = 1, replace = TRUE))
sum(sample(1:100, size = 1, replace = TRUE))
sum(sample(1:100, size = 1, replace = TRUE))
sum(sample(1:100, size = 1, replace = TRUE))
sum(sample(1:100, size = 1, replace = TRUE))
sum(sample(1:100, size = 1, replace = TRUE))
sum(sample(1:100, size = 1, replace = TRUE))
sum(sample(1:100, size = 1, replace = TRUE))
sum(sample(1:100, size = 1, replace = TRUE))
sum(sample(1:100, size = 1, replace = TRUE))
sum(sample(1:100, size = 1, replace = TRUE))
sum(sample(1:100, size = 1, replace = TRUE))
sum(sample(1:100, size = 1, replace = TRUE))
sum(sample(1:100, size = 1, replace = TRUE))
sum(sample(1:100, size = 1, replace = TRUE))
sum(sample(1:100, size = 1, replace = TRUE))
sum(sample(1:100, size = 1, replace = TRUE))
sum(sample(1:100, size = 1, replace = TRUE))
sum(sample(1:100, size = 1, replace = TRUE))
sum(sample(1:100, size = 1, replace = TRUE))
sum(sample(1:100, size = 1, replace = TRUE))
sum(sample(1:100, size = 1, replace = TRUE))
sum(sample(1:100, size = 1, replace = TRUE))
sum(sample(1:100, size = 1, replace = TRUE))
sum(sample(1:100, size = 1, replace = TRUE))
sum(sample(1:100, size = 1, replace = TRUE))
sum(sample(1:100, size = 1, replace = TRUE))
sum(sample(1:100, size = 1, replace = TRUE))
sum(sample(1:100, size = 1, replace = TRUE))
sum(sample(1:100, size = 1, replace = TRUE))
sum(sample(1:100, size = 1, replace = TRUE))
sum(sample(1:100, size = 1, replace = TRUE))
sum(sample(1:100, size = 1, replace = TRUE))
sum(sample(1:20, size = 1, replace = TRUE))
sum(sample(1:20, size = 1, replace = TRUE))
sum(sample(1:20, size = 1, replace = TRUE))
20
sum(sample(1:10, size = 2, replace = TRUE))+15
sum(sample(1:20, size = 1, replace = TRUE))
sum(sample(1:20, size = 1, replace = TRUE))
sum(sample(1:10, size = 2, replace = TRUE))+15
sum(sample(1:20, size = 1, replace = TRUE))
sum(sample(1:20, size = 1, replace = TRUE))
gdata<-list(C(1,1),c(1,2),c(1,3),c(1,4),c(2,1),c(2,2),c(2,3),c(2,4),c(3,1),c(3,2),c(3,3),c(3,4),c(4,1),c(4,2)c(4,3),c(4,4))
gdata<-list(c(1,1),c(1,2),c(1,3),c(1,4),c(2,1),c(2,2),c(2,3),c(2,4),c(3,1),c(3,2),c(3,3),c(3,4),c(4,1),c(4,2)c(4,3),c(4,4))
gdata<-list(c(1,1),c(1,2),c(1,3),c(1,4),c(2,1),c(2,2),c(2,3),c(2,4),c(3,1),c(3,2),c(3,3),c(3,4),c(4,1),c(4,2),c(4,3),c(4,4))
gdata<-list(c(1,1),c(1,2),c(1,3),c(1,4),c(2,1)),c(2,3),c(2,4),c(3,1),c(3,4),c(4,1),c(4,2),c(4,3),c(4,4))
gdata<-list(c(1,1),c(1,2),c(1,3),c(1,4),c(2,1),c(2,3),c(2,4),c(3,1),c(3,4),c(4,1),c(4,2),c(4,3),c(4,4))
gdata<-data.frame(c(1,1),c(1,2),c(1,3),c(1,4),c(2,1),c(2,3),c(2,4),c(3,1),c(3,4),c(4,1),c(4,2),c(4,3),c(4,4))
View(gdata)
gdata<-data.frame(c(1,2),c(1,3),c(1,4),c(2,1),c(2,3),c(2,4),c(3,1),c(3,4),c(4,1),c(4,2),c(4,3))
gdata <- data.frame(c(1,1,1,2,2,2,3,3,4,4,4), c(2,3,4,1,3,4,1,4,1,2,3),
c(1,1,1,-1,-1,-1,-1,1,-1,1,-1))
colnames(gdata) <- c("first", "second", "y")
View(gdata)
omega <-function(dataset,sigma){
omega_matrix <- matrix(data = 0, nrow=(nrow(dataset)),ncol=(nrow(dataset)))
for(i in 1:(nrow(dataset))){
for (j in 1:(nrow(dataset))){
if(dataset$first[i] == dataset$first[j]){
omega_matrix[i,j] <- omega_matrix[i,j] + sigma^2
}
if(dataset$first[i] == dataset$second[j]){
omega_matrix[i,j] <- omega_matrix[i,j] - sigma^2
}
if(dataset$second[i] == dataset$first[j]){
omega_matrix[i,j] <- omega_matrix[i,j] - sigma^2
}
if(dataset$second[i] == dataset$second[j]){
omega_matrix[i,j] <- omega_matrix[i,j] + sigma^2
}
}
}
return (omega_matrix)
}
omega(gdata, 2)
d2logpri<-function(omega,g){
return(-1*solve(omega))
}
d2logpri(omega(gdata,2))
d2logpri<-function(omega,g){
return(-1*solve(omega,diag(1,ncol(omega),nrow(omega))))
}
d2logpri(omega(gdata,2))
gdata <- data.frame(c(1,1,1,2,2,2,3,3,4,4), c(2,3,1,3,4,1,4,1,2,3),
c(1,1,1,-1,-1,-1,-1,1,-1,1,-1))
colnames(gdata) <- c("first", "second", "y")
View(gdata)
omega <-function(dataset,sigma){
omega_matrix <- matrix(data = 0, nrow=(nrow(dataset)),ncol=(nrow(dataset)))
for(i in 1:(nrow(dataset))){
for (j in 1:(nrow(dataset))){
if(dataset$first[i] == dataset$first[j]){
omega_matrix[i,j] <- omega_matrix[i,j] + sigma^2
}
if(dataset$first[i] == dataset$second[j]){
omega_matrix[i,j] <- omega_matrix[i,j] - sigma^2
}
if(dataset$second[i] == dataset$first[j]){
omega_matrix[i,j] <- omega_matrix[i,j] - sigma^2
}
if(dataset$second[i] == dataset$second[j]){
omega_matrix[i,j] <- omega_matrix[i,j] + sigma^2
}
}
}
return (omega_matrix)
}
omega(gdata, 2)
d2logpri<-function(omega,g){
return(-1*solve(omega,diag(1,ncol(omega),nrow(omega))))
}
d2logpri(omega(gdata,2))
d2logpri<-function(omega,g){
omega<-omega+diag(.001,nrow(omega),ncol(omega))
return(-1*solve(omega,diag(1,nrow(omega),ncol(omega))))
}
d2logpri<-(omega(gdata),2)
d2logpri<-(omega(gdata,2),2)
d2logpri(omega(gdata,2),3)
d2logpri<-function(omega,g){
omega<-omega+.0000001)
return(-1*solve(omega,diag(1,nrow(omega),ncol(omega))))
}
d2logpri<-function(omega,g){
omega<-omega+.0000001
return(-1*solve(omega,diag(1,nrow(omega),ncol(omega))))
}
d2logpri(omega(gdata,2),3)
d2logpri<-function(omega,g){
omega<-omega+.0000001
return(-1*solve(omega,diag(1,nrow(omega),ncol(omega))))
}
d2logpri(omega(gdata,2),3)
d2logpri<-function(omega,g){
omega<-omega+.0000001
return(-1*solve(omega))
}
d2logpri(omega(gdata,2),3)
d2logpri<-function(omega,g){
omega<-omega+.001
return(-1*solve(omega))
}
d2logpri(omega(gdata,2),3)
d2logpri<-function(omega,g){
omega<-omega+.01
return(-1*solve(omega))
}
d2logpri(omega(gdata,2),3)
d2logpri<-function(omega,g){
omega<-omega+.01
return(solve(omega))
}
d2logpri(omega(gdata,2),3)
d2logpri<-function(omega,g){
diag(omega)<-diag(omega)+.01
return(solve(omega))
}
d2logpri(omega(gdata,2),3)
d2logpri<-function(omega,g){
diag(omega)<-diag(omega)+.0001
return(solve(omega))
}
d2logpri(omega(gdata,2),3)
d2logpri<-function(omega,g){
diag(omega)<-diag(omega)+.001
return(solve(omega))
}
d2logpri(omega(gdata,2),3)
d2logpri<-function(omega,g){
diag(omega)<-diag(omega)+.01
return(solve(omega))
}
d2logpri(omega(gdata,2),3)
d2logpri<-function(omega,g){
if (det(omega) == 0){
diag(omega)<-diag(omega)+.01}
return(solve(omega))
}
d2logpri<-function(omega,g){
if (det(omega) == 0){
diag(omega)<-diag(omega)+.01}
inv_omega<-(solve(omega))
neg_inv_omega<- -1*(inv_omega)
return(neg_inv_omega)
}
d2logpri(omega(gdata,2),3)
d2LogLike<-function(y,g){
LL<-logLike(y,g)
derivativeLL<-dLogLike(y,g)
output<-diag(x=0,length(y),length(y))
for (i in 1:length(y)){
firstTerm<- ((dnorm(g[i]))^2)/LL^2
secondTerm<-g[i]*derivativeLL[i]
output[i,i]<-(-1*firstTerm)-secondTerm
}
return(output)
}
y1<-c(1,1,-1,1,-1)
g1<-c(2,3,4,5,6)
logLike(y1,g1)
dLogLike(y1,g1)
d2LogLike(y1,g1)
gdata <- data.frame(c(1,1,1,2,2,2,3,3,4,4,4), c(2,3,4,1,3,4,1,4,1,2,3),
c(1,1,1,-1,-1,-1,-1,1,-1,1,-1))
colnames(gdata) <- c("first", "second", "y")
View(gdata)
omega <-function(dataset,sigma){
omega_matrix <- matrix(data = 0, nrow=(nrow(dataset)),ncol=(nrow(dataset)))
for(i in 1:(nrow(dataset))){
for (j in 1:(nrow(dataset))){
if(dataset$first[i] == dataset$first[j]){
omega_matrix[i,j] <- omega_matrix[i,j] + sigma^2
}
if(dataset$first[i] == dataset$second[j]){
omega_matrix[i,j] <- omega_matrix[i,j] - sigma^2
}
if(dataset$second[i] == dataset$first[j]){
omega_matrix[i,j] <- omega_matrix[i,j] - sigma^2
}
if(dataset$second[i] == dataset$second[j]){
omega_matrix[i,j] <- omega_matrix[i,j] + sigma^2
}
}
}
return (omega_matrix)
}
omega(gdata, 2)
omega <-function(dataset,sigma){
omega_matrix <- matrix(data = 0, nrow=(nrow(dataset)),ncol=(nrow(dataset)))
for(i in 1:(nrow(dataset))){
for (j in 1:(nrow(dataset))){
if(dataset$first[i] == dataset$first[j]){
omega_matrix[i,j] <- omega_matrix[i,j] + sigma^2
}
if(dataset$first[i] == dataset$second[j]){
omega_matrix[i,j] <- omega_matrix[i,j] - sigma^2
}
if(dataset$second[i] == dataset$first[j]){
omega_matrix[i,j] <- omega_matrix[i,j] - sigma^2
}
if(dataset$second[i] == dataset$second[j]){
omega_matrix[i,j] <- omega_matrix[i,j] + sigma^2
}
}
}
return (omega_matrix)
}
d2LogLike<-function(y,g){
LL<-logLike(y,g)
derivativeLL<-dLogLike(y,g)
output<-diag(x=0,length(y),length(y))
for (i in 1:length(y)){
firstTerm<- ((dnorm(g[i]))^2)/LL^2
secondTerm<-g[i]*derivativeLL[i]
output[i,i]<-(-1*firstTerm)-secondTerm
}
return(output)
}
d2logpri<-function(omega,g){
if (det(omega) == 0){
diag(omega)<-diag(omega)+.01}
inv_omega<-(solve(omega))
neg_inv_omega<- -1*(inv_omega)
return(neg_inv_omega)
}
omega_test <- omega(gdata, 2)
g_test <- sample(1:10, 11, replace = T)
dlogpri <- function(omega, g){
if (det(omega) == 0){
diag(omega) <- diag(omega) + .01
}
inv_omega <- solve(omega)
neg_inv_omega <- -inv_omega
return (neg_inv_omega %*% g)
}
dlogpri(omega_test, g_test)
diag(omega_test) <- diag(omega_test) + .01
logLike<-function(y,g){
result<-c()
for (i in 1:length(y)){
x<-y[i]*g[i]
xi<-log(pnorm(x,0,1))
result<-c(result,xi)
}
output<-sum(result)
return(output)
}
y1<-c(1,1,-1,1,-1)
g1<-c(2,3,4,5,6)
logLike(y1,g1)
dlogpri <- function(omega, g){
if (det(omega) == 0){
diag(omega) <- diag(omega) + .01
}
inv_omega <- solve(omega)
neg_inv_omega <- -inv_omega
return (neg_inv_omega %*% g)
}
d2LogLike<-function(y,g){
LL<-logLike(y,g)
derivativeLL<-dLogLike(y,g)
output<-diag(x=0,length(y),length(y))
for (i in 1:length(y)){
firstTerm<- ((dnorm(g[i]))^2)/LL^2
secondTerm<-g[i]*derivativeLL[i]
output[i,i]<-(-1*firstTerm)-secondTerm
}
return(output)
}
dLogLike<-function(y,g){
denom<-logLike(y,g)
output<-c()
for (i in 1:length(y)){
num<-y[i]*dnorm(g[i])
output[i]<-num/denom
}
return(output)
}
d2psi<- function(y,g,omega){  #equation 9
}
d2psi<- function(y,g,omega){  #equation 9
}
d2psi<- function(y,g,omega){
}
d2psi<- function(y,g,omega){
output<-(d2LogLike(y,g)+d2logpri(omega,g)
return(output)
}
d2psi<- function(y,g,omega){
output<-(d2LogLike(y,g)+d2logpri(omega,g))
return(output)
}
library(readxl)
PS3_data <- read_excel("C:/Users/Marcus/Downloads/PS3_data.xlsx",
col_types = c("numeric", "numeric", "numeric",
"blank", "numeric", "numeric", "numeric",
"numeric", "numeric"))
View(PS3_data)
excess_amzn<-PS3_data$AMZN - PS3_data$`Risk Free''
excess_BA<-PS3_data$BA - PS3_data$`Risk Free`
excess_nflx<-PS3_data$NFLX - PS3_data$`Risk Free`
excess_amzn<-PS3_data$AMZN - PS3_data$`Risk Free'
excess_BA<-PS3_data$BA - PS3_data$`Risk Free`
excess_nflx<-PS3_data$NFLX - PS3_data$`Risk Free`
excess_XOM<-PS3_data$XOM - PS3_data$`Risk Free`
excess_fdx<-PS3_data$FDX - PS3_data$`Risk Free`
excess_amzn<-PS3_data$AMZN - PS3_data$`Risk Free`
excess_BA<-PS3_data$BA - PS3_data$`Risk Free`
excess_nflx<-PS3_data$NFLX - PS3_data$`Risk Free`
excess_XOM<-PS3_data$XOM - PS3_data$`Risk Free`
excess_fdx<-PS3_data$FDX - PS3_data$`Risk Free`
excess_market<-PS3_data$Market - PS3_data$`Risk Free`
lm(excess_amzn ~ excess_market)
lm(excess_BA ~ excess_market)
lm(excess_nflx ~ excess_market)
lm(excess_fdx ~ excess_market)
lm(excess_xom ~ excess_market)
lm(excess_XOM ~ excess_market)
lm(excess_amzn ~ excess_market)
excess_XOM<-PS3_data$XOM - PS3_data$`Risk Free`
lm(excess_XOM ~ excess_market)
lm(excess_fdx ~ excess_market)
lm(excess_nflx ~ excess_market)
lm(excess_BA ~ excess_market)
var(PS3_data$BA)
var(PS3_data$AMZN)
var(PS3_data$BA)
var(PS3_data$FDX)
var(PS3_data$XOM)
var(PS3_data$NFLX)
var(PS3_data$Market)
varepsilon<- function(stock,market,beta){
epsil<-var(stock)-(var(market)*beta^2)
return(epsil)
}
varepsilon(PS3_data$AMZN,PS3_data$Market,1.194)
varepsilon(PS3_data$BA,PS3_data$Market,.900211)
varepsilon(PS3_data$NFLX,PS3_data$Market,1.656)
varepsilon(PS3_data$FDX,PS3_data$Market,1.3236)
varepsilon(PS3_data$XOM,PS3_data$Market,.5679721)
markmean<-mean(PS3_data$Market)
markmean<-mean(excess_market)
markvar<-var(PS3_data$Market)
w0<-function(alpha,stock,varep){
top<-alpha/varep
bottom<-markmean/markvar
return(top/bottom)
}
w0(.001055,PS3_data$AMZN,.0001475)
w0(.001055,PS3_data$AMZN,.0001475)
w0(-.0005275,PS3_data$XOM,.00004351535)
w0(.0003758,PS3_data$FDX,.00008268)
w0(.0008021,PS3_data$NFLX,.000258676)
w0(.002107,PS3_data$BA,.000107)
w0A<-w0(.001055,PS3_data$AMZN,.0001475)
w0X<-w0(-.0005275,PS3_data$XOM,.00004351535)
w0F<-w0(.0003758,PS3_data$FDX,.00008268)
w0N<-w0(.0008021,PS3_data$NFLX,.000258676)
w0B<-w0(.002107,PS3_data$BA,.000107)
return(answer)
wA<-function(w0,beta){
answer<- w0/(1+((1-beta)*w0))
return(answer)
}
wA(w0A,1.194020)
wA(w0X,.5679721)
wA(w0F,1.3236)
wA(w0N,1.6564)
wA(w0B,.900211)
wA(w0A,1.194020)+wA(w0X,.5679721)+wA(w0F,1.3236)+wA(w0N,1.6564)+wA(w0B,.900211)
1-wA(w0A,1.194020)+wA(w0X,.5679721)+wA(w0F,1.3236)+wA(w0N,1.6564)+wA(w0B,.900211)
wA(w0A,1.194020)+wA(w0X,.5679721)+wA(w0F,1.3236)+wA(w0N,1.6564)+wA(w0B,.900211)
1-(wA(w0A,1.194020)+wA(w0X,.5679721)+wA(w0F,1.3236)+wA(w0N,1.6564)+wA(w0B,.900211))
lm(excess_XOM ~ excess_market)
1-(wA(w0A,1.194020)+wA(w0X,.5679721)+wA(w0F,1.3236)+wA(w0N,1.6564)+wA(w0B,.900211))     #find the market weight
library(readxl)
PS3_data <- read_excel("Finance PS3/PS3_data.xlsx")
View(PS3_data)
library(readxl)
PS3_data_raw <- read_excel("Finance PS3/PS3_data_raw.xlsx")
View(PS3_data_raw)
lm(excess_amzn ~ excess_market)      #Linear regression of excess returns of the market on the excess returns on the stock
lm(excess_BA ~ excess_market)       #or is it the other way around? I can never remember. the stocks are the dependant variable
lm(excess_nflx ~ excess_market)
lm(excess_fdx ~ excess_market)
lm(excess_XOM ~ excess_market)
(.001055*w0A-.0005275*w0X+.0003758*w0F+.0008021*w0N+.002107w0B)
(.001055*w0A-.0005275*w0X+.0003758*w0F+.0008021*w0N+.002107*w0B)
setwd("~/ASP_group_project")
## Load libraries
library(devtools)
library(roxygen2)
library(testthat)
## Updates the package based on R scripts written, man and NAMESPACE automatically updates.
# Manually update DESCRIPTION if need be.
current.code <- as.package("gaussianComparisons")
load_all(current.code)
check(current.code)
# omega Function (Equation 1.5)
gdata <- data.frame(c(1,1,1,2,2,2,3,3,4,4,4), c(2,3,4,1,3,4,1,4,1,2,3),
c(1,1,1,-1,-1,-1,-1,1,-1,1,-1))
colnames(gdata) <- c("first", "second", "y")
#View(gdata)
omega(gdata, 2)
# dLogPri Function (Equation 4)
omega_test <- omega(gdata, 2)
g_test <- sample(1:10, 11, replace = T)
dLogPri(omega_test, g_test)
diag(omega_test) <- diag(omega_test) + .01
(-solve(omega_test)) %*% g_test
document(current.code)
exampleHITs <- read.csv("C:/Users/Marcus/Downloads/exampleHITs.csv")
View(exampleHITs)
cleaner(exampleHITs)
?omega
omega(exampleHITs, 4)
view(omega(exampleHITs, 4))
x<- omega(exampleHITs, 4)
view(x
)
veiw(x)
view(x)
View(x)
View(x)
?newtonMethodPrequel
?newtonMethod
>>>>>>> ae1a313b444251b435557fafbc93704c8fb30020
