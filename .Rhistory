)
server <- function(input, output) {
output$plot1 <- renderPlot({
plot(mtcars$wt, mtcars$mpg)
})
output$info <- renderText({
paste0("x=", input$plot_click$x, "\ny=", input$plot_click$y)
})
}
shinyApp(ui, server)
ui <- fluidPage(
# App title ----
titlePanel("Presidential Forecasts"),
# Sidebar layout with a input and output definitions ----
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
# Include Clarifying Text
helpText("Here are the results of presidential forecasts from 1952-2008"),
# Input: Selector for Forecast model to plot with Actual results ----
selectInput("variable", "Forecast model:",
c("Campbell",
"Lewis-Beck",
"EWT2C2",
"Fair",
"Hibbs",
"Abramowitz"))
),
# Main panel for displaying outputs ----
mainPanel(
# Output: HTML table with requested number of observations ----
tableOutput("view"),
# Output: Plot the election results
plotOutput("plot", click = "plot_click")
)
)
)
server <- function(input, output) {
library(EBMAforecast)
data("presidentialForecast")
# Show the first "n" observations ----
output$view <- renderTable({
presidentialForecast
})
# Plot the actual results
output$plot <- renderPlot({
plot(as.numeric(row.names(presidentialForecast)), presidentialForecast$Actual,
xlab = "Year", ylab = "Voting Percentage", col = "blue")
if (input$variable == "Campbell"){
points(as.numeric(row.names(presidentialForecast)), presidentialForecast$Campbell, col = "red")
} else if (input$variable == "Lewis-Beck"){
points(as.numeric(row.names(presidentialForecast)), presidentialForecast$`Lewis-Beck`, col = "red")
} else if (input$variable == "EWT2C2"){
points(as.numeric(row.names(presidentialForecast)), presidentialForecast$EWT2C2, col = "red")
} else if (input$variable == "Fair"){
points(as.numeric(row.names(presidentialForecast)), presidentialForecast$Fair, col = "red")
} else if (input$variable == "Hibbs"){
points(as.numeric(row.names(presidentialForecast)), presidentialForecast$Hibbs, col = "red")
} else {
points(as.numeric(row.names(presidentialForecast)), presidentialForecast$Abramowitz, col = "red")
}
})
# Output click info
output$info <- renderText({
paste0("Year =", input$plot_click$x, "\nVoting Percentage =", input$plot_click$y)
})
}
shinyApp(ui = ui, server = server)
ui <- fluidPage(
# App title ----
titlePanel("Presidential Forecasts"),
# Sidebar layout with a input and output definitions ----
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
# Include Clarifying Text
helpText("Here are the results of presidential forecasts from 1952-2008"),
# Input: Selector for Forecast model to plot with Actual results ----
selectInput("variable", "Forecast model:",
c("Campbell",
"Lewis-Beck",
"EWT2C2",
"Fair",
"Hibbs",
"Abramowitz"))
),
# Main panel for displaying outputs ----
mainPanel(
# Output: HTML table with requested number of observations ----
tableOutput("view"),
# Output: Plot the election results
plotOutput("plot", click = "plot_click"),
verbatimTextOutput("info")
)
)
)
server <- function(input, output) {
library(EBMAforecast)
data("presidentialForecast")
# Show the first "n" observations ----
output$view <- renderTable({
presidentialForecast
})
# Plot the actual results
output$plot <- renderPlot({
plot(as.numeric(row.names(presidentialForecast)), presidentialForecast$Actual,
xlab = "Year", ylab = "Voting Percentage", col = "blue")
if (input$variable == "Campbell"){
points(as.numeric(row.names(presidentialForecast)), presidentialForecast$Campbell, col = "red")
} else if (input$variable == "Lewis-Beck"){
points(as.numeric(row.names(presidentialForecast)), presidentialForecast$`Lewis-Beck`, col = "red")
} else if (input$variable == "EWT2C2"){
points(as.numeric(row.names(presidentialForecast)), presidentialForecast$EWT2C2, col = "red")
} else if (input$variable == "Fair"){
points(as.numeric(row.names(presidentialForecast)), presidentialForecast$Fair, col = "red")
} else if (input$variable == "Hibbs"){
points(as.numeric(row.names(presidentialForecast)), presidentialForecast$Hibbs, col = "red")
} else {
points(as.numeric(row.names(presidentialForecast)), presidentialForecast$Abramowitz, col = "red")
}
})
# Output click info
output$info <- renderText({
paste0("Year =", input$plot_click$x, "\nVoting Percentage =", input$plot_click$y)
})
}
shinyApp(ui = ui, server = server)
ui <- fluidPage(
# App title ----
titlePanel("Presidential Forecasts"),
# Sidebar layout with a input and output definitions ----
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
# Include Clarifying Text
helpText("Here are the results of presidential forecasts from 1952-2008"),
# Input: Selector for Forecast model to plot with Actual results ----
selectInput("variable", "Forecast model:",
c("Campbell",
"Lewis-Beck",
"EWT2C2",
"Fair",
"Hibbs",
"Abramowitz"))
),
# Main panel for displaying outputs ----
mainPanel(
# Output: HTML table with requested number of observations ----
tableOutput("view"),
# Output: Plot the election results
plotOutput("plot", click = "plot_click"),
verbatimTextOutput("info")
)
)
)
server <- function(input, output) {
library(EBMAforecast)
data("presidentialForecast")
# Show the first "n" observations ----
output$view <- renderTable({
presidentialForecast
})
# Plot the actual results
output$plot <- renderPlot({
plot(as.numeric(row.names(presidentialForecast)), presidentialForecast$Actual,
xlab = "Year", ylab = "Voting Percentage", col = "blue", main = "Voting Percentage by Year")
if (input$variable == "Campbell"){
points(as.numeric(row.names(presidentialForecast)), presidentialForecast$Campbell, col = "red")
} else if (input$variable == "Lewis-Beck"){
points(as.numeric(row.names(presidentialForecast)), presidentialForecast$`Lewis-Beck`, col = "red")
} else if (input$variable == "EWT2C2"){
points(as.numeric(row.names(presidentialForecast)), presidentialForecast$EWT2C2, col = "red")
} else if (input$variable == "Fair"){
points(as.numeric(row.names(presidentialForecast)), presidentialForecast$Fair, col = "red")
} else if (input$variable == "Hibbs"){
points(as.numeric(row.names(presidentialForecast)), presidentialForecast$Hibbs, col = "red")
} else {
points(as.numeric(row.names(presidentialForecast)), presidentialForecast$Abramowitz, col = "red")
}
})
# Output click info
output$info <- renderText({
paste0("Year =", input$plot_click$x, "\nVoting Percentage =", input$plot_click$y)
})
}
shinyApp(ui = ui, server = server)
legend("topright",
legend=c("All", "Low-Quality", "High-Quality"),
lty=c(1,3,2),
col=c("black", "blue", "red"),
title="Legend")
ui <- fluidPage(
# App title ----
titlePanel("Presidential Forecasts"),
# Sidebar layout with a input and output definitions ----
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
# Include Clarifying Text
helpText("Here are the results of presidential forecasts from 1952-2008"),
# Input: Selector for Forecast model to plot with Actual results ----
selectInput("variable", "Forecast model:",
c("Campbell",
"Lewis-Beck",
"EWT2C2",
"Fair",
"Hibbs",
"Abramowitz"))
),
# Main panel for displaying outputs ----
mainPanel(
# Output: HTML table with requested number of observations ----
tableOutput("view"),
# Output: Plot the election results
plotOutput("plot", click = "plot_click"),
verbatimTextOutput("info")
)
)
)
server <- function(input, output) {
library(EBMAforecast)
data("presidentialForecast")
# Show the first "n" observations ----
output$view <- renderTable({
presidentialForecast
})
# Plot the actual results
output$plot <- renderPlot({
plot(as.numeric(row.names(presidentialForecast)), presidentialForecast$Actual,
xlab = "Year", ylab = "Voting Percentage", col = "blue", main = "Voting Percentage by Year")
if (input$variable == "Campbell"){
points(as.numeric(row.names(presidentialForecast)), presidentialForecast$Campbell, col = "red")
} else if (input$variable == "Lewis-Beck"){
points(as.numeric(row.names(presidentialForecast)), presidentialForecast$`Lewis-Beck`, col = "red")
} else if (input$variable == "EWT2C2"){
points(as.numeric(row.names(presidentialForecast)), presidentialForecast$EWT2C2, col = "red")
} else if (input$variable == "Fair"){
points(as.numeric(row.names(presidentialForecast)), presidentialForecast$Fair, col = "red")
} else if (input$variable == "Hibbs"){
points(as.numeric(row.names(presidentialForecast)), presidentialForecast$Hibbs, col = "red")
} else {
points(as.numeric(row.names(presidentialForecast)), presidentialForecast$Abramowitz, col = "red")
}
legend("topright", legend = c("Actual", input$variable),
col = c("blue", "red"))
})
# Output click info
output$info <- renderText({
paste0("Year =", input$plot_click$x, "\nVoting Percentage =", input$plot_click$y)
})
}
shinyApp(ui = ui, server = server)
ui <- fluidPage(
# App title ----
titlePanel("Presidential Forecasts"),
# Sidebar layout with a input and output definitions ----
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
# Include Clarifying Text
helpText("Here are the results of presidential forecasts from 1952-2008"),
# Input: Selector for Forecast model to plot with Actual results ----
selectInput("variable", "Forecast model:",
c("Campbell",
"Lewis-Beck",
"EWT2C2",
"Fair",
"Hibbs",
"Abramowitz"))
),
# Main panel for displaying outputs ----
mainPanel(
# Output: HTML table with requested number of observations ----
tableOutput("view"),
# Output: Plot the election results
plotOutput("plot", click = "plot_click"),
verbatimTextOutput("info")
)
)
)
server <- function(input, output) {
library(EBMAforecast)
data("presidentialForecast")
# Show the first "n" observations ----
output$view <- renderTable({
presidentialForecast
})
# Plot the actual results
output$plot <- renderPlot({
plot(as.numeric(row.names(presidentialForecast)), presidentialForecast$Actual,
xlab = "Year", ylab = "Voting Percentage", col = "blue", main = "Voting Percentage by Year")
if (input$variable == "Campbell"){
points(as.numeric(row.names(presidentialForecast)), presidentialForecast$Campbell, col = "red")
} else if (input$variable == "Lewis-Beck"){
points(as.numeric(row.names(presidentialForecast)), presidentialForecast$`Lewis-Beck`, col = "red")
} else if (input$variable == "EWT2C2"){
points(as.numeric(row.names(presidentialForecast)), presidentialForecast$EWT2C2, col = "red")
} else if (input$variable == "Fair"){
points(as.numeric(row.names(presidentialForecast)), presidentialForecast$Fair, col = "red")
} else if (input$variable == "Hibbs"){
points(as.numeric(row.names(presidentialForecast)), presidentialForecast$Hibbs, col = "red")
} else {
points(as.numeric(row.names(presidentialForecast)), presidentialForecast$Abramowitz, col = "red")
}
legend("topright", legend = c("Actual", input$variable),
col = c("blue", "red"), pch = c(1,1))
})
# Output click info
output$info <- renderText({
paste0("Year =", input$plot_click$x, "\nVoting Percentage =", input$plot_click$y)
})
}
shinyApp(ui = ui, server = server)
View(data_montgomery)
unique(data_montgomery$document_id)
class(unique(data_montgomery$document_id))
combn(data_montgomery$document_id, 2)
View(combn(data_montgomery$document_id, 2))
View(combn(unique(data_montgomery$document_id), 2))
x <- combn(unique(data_montgomery$document_id), 2)
new_data <- cleaner(data_montgomery)
View(new_data)
ncol(x)
x$V2 <- NULL
x$V2 <- NULL
x[,][2] <- NULL
x <- combn(unique(data_montgomery$document_id), 2)
x[,][2] <- NULL
x[1][2] <- NULL
library(dplyr)
install.packages("nycflights13")
library(nycflights13)
data(flights)
head(flights)
x[,2] <- NULL
x <- x[, -2]
x <- x[, -2]
justMay<-filter(flights, month==5)
head(justMay)
class(justMay)
for (i in 1:ncol(x)){
j <- 1
while (j <= nrow(new_data)){
if (x[1][i] == new_data$first[j] & x[2][i] == new_data$second[j]){
x <- x[, -i]
j <- 0
} else if (x[1][i] == new_data$second[j] & x[2][i] == new_data$first[j]){
x <- x[, -i]
j <- 0
}
j <- j + 1
}
}
x <- combn(unique(data_montgomery$document_id), 2)
new_data <- cleaner(data_montgomery)
for (i in 1:ncol(x)){
j <- 1
while (j <= nrow(new_data)){
if (x[1][i] == new_data$first[j] & x[2][i] == new_data$second[j]){
x <- x[, -i]
j <- 0
} else if (x[1][i] == new_data$second[j] & x[2][i] == new_data$first[j]){
x <- x[, -i]
j <- 0
}
j <- j + 1
}
}
for (i in 1:ncol(x)){
j <- 1
while (j <= nrow(new_data)){
if (x[1][i] == new_data$first[j] & x[2][i] == new_data$second[j]){
x <- x[, -i]
j <- 0
} else if (x[1][i] == new_data$second[j] & x[2][i] == new_data$first[j]){
x <- x[, -i]
j <- 0
}
j <- j + 1
}
}
for (i in 1:ncol(x)){
j <- 1
while (j <= nrow(new_data)){
if (x[1][i] == new_data$first[j] & x[2][i] == new_data$second[j]){
x <- x[, -i]
j <- 0
} else if (x[1][i] == new_data$second[j] & x[2][i] == new_data$first[j]){
x <- x[, -i]
j <- 0
}
j <- j + 1
}
}
x[2][1]
x[1][1]
new_data$first[1]
new_data$second[1]
x[1][2] == new_data$first[1] & x[2][2] == new_data$second[1]
x[2][2]
x[1][2]
View(x)
x <- combn(unique(data_montgomery$document_id), 2)
for (i in 1:ncol(x)){
j <- 1
while (j <= nrow(new_data)){
if (x[1][i] == new_data$first[j] & x[2][i] == new_data$second[j]){
x <- x[, -i]
} else if (x[1][i] == new_data$second[j] & x[2][i] == new_data$first[j]){
x <- x[, -i]
}
j <- j + 1
}
}
arrange(flights, day)
arrange(flights, desc(day))
select(flights, year)
select(flights, year:day)
select(flights, -(year:day))
select(flights, starts_with("ye"))
select(flights, contains("ye"))
rename(flights, tail_num=tailnum)
flights<-mutate(flights, firstday = (day==1))
table(flights$firstday)
flights<-mutate(flights, firstday = (day==1), secondday=(day==2))
colnames(flights)
flights<-mutate(flights, logair=log(air_time))
hist(flights$logair)
summarise(flights, delay=mean(dep_delay, na.rm=TRUE))
by_day <- group_by(flights, year, month, day)
summarise(by_day, delay=mean(dep_delay, na.rm=TRUE))
numflights <- flights %>%
group_by(dest) %>%
summarise(count=n()) %>%
filter(count>20)
numflights
delays <- flights %>%
group_by(dest) %>%
summarise(count=n(),
delay=mean(arr_delay, na.rm=TRUE)
) %>%
filter(count>20)
delays
delaysByMonth <- flights %>%
group_by(dest, month) %>%
summarise(count=n(),
delay=mean(arr_delay, na.rm=TRUE)
) %>%
filter(count>20)
delaysByMonth
delaysByMonthByCarrier <- flights %>%
group_by(dest, month, carrier, dest) %>%
summarise(count=n(),
delay=mean(arr_delay, na.rm=TRUE)
) %>%
filter(count>20)
delaysByMonthByCarrier
x <- combn(unique(data_montgomery$document_id), 2)
x[1][1]
x[1][2]
x[2][1]
x[1][3]
x[2][3]
x[1][100]
x[1][50]
x[1][V1]
x[1]["V2"]
x[1]["V1"]
x[1]["V3"]
x[1,2]
x[1,2]
x[1,7]
for (i in 1:ncol(x)){
j <- 1
while (j <= nrow(new_data)){
if (x[1, i] == new_data$first[j] & x[2, i] == new_data$second[j]){
x <- x[, -i]
j <- 0
} else if (x[1, i] == new_data$second[j] & x[2, i] == new_data$first[j]){
x <- x[, -i]
j <- 0
}
j <- j + 1
}
}
x <- combn(unique(data_montgomery$document_id), 2)
new_data <- cleaner(data_montgomery)
for (i in 1:ncol(x)){
j <- 1
while (j <= nrow(new_data)){
if (x[1, i] == new_data$first[j] & x[2, i] == new_data$second[j]){
x <- x[, -i]
j <- 0
} else if (x[1, i] == new_data$second[j] & x[2, i] == new_data$first[j]){
x <- x[, -i]
j <- 0
}
j <- j + 1
}
}
rnorm(250)
library(readr)
Batted_Balls_17 <- read_csv("~/Documents/Wash U Sports Analytics/SABR18/Batted_Balls_17.csv")
View(Batted_Balls_17)
load("~/Documents/Wash U Sports Analytics/SABR18/ALLINFO.RData")
mean(subset(cleaned_bips_17, player == "DJ Lemahieu")$launch_angle)
View(cleaned_bips_17)
View(cleaned_bips_17)
mean(subset(cleaned_bips_17, player_name == "DJ Lemahieu")$launch_angle)
View(subset(cleaned_bips_17, player_name == "DJ Lemahieu"))
))
)
